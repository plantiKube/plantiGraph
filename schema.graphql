#type Query {
#    exampleLambda(exampleStringInput: String!): String! @lambda
#    addTwo(addTwoInput: twoNums!): Int! @lambda
#    addTwo(one: Int!, two: Int!): Int! @lambda
#}

input twoNums {
    one: Int!
    two: Int!
}

#type Mutation {
#    ingestQR(qr: String!): String! @lambda
#}


type CropIntentionsList {
    cropIntentions: [CropIntention!]!
}

type CropIntention {
    crop: Crop!
    harvestPerWeek: Int!
}

type GrowPlate {
    rawNetCupReading: Int
}

# name something like `SignalCluster` rather than `SignalTable` ..
# .. to illustrate it's a graph now and not an array?
# They are in some sense isometric semantic vectors so perhaps this is irrelevant.
type SignalTable {
    id: ID!
    
    signals: [Signal!]!
}

type Signal {
    id: ID!
    
    signalDate: DateTime! @search
    signalType: SignalType!
    plantName: String
    plantId: String # this should be elsewhere in the structure.
    targetMessage: String
    algoString: String
    daysToGerminate: Int
    growTime: Int
    maxHarvTime: Int
    moduleType: String
}

enum SignalType {
    GERMINATE
    TRANSFER
    HARVEST
}

type ModuleMap {
    id: ID!
    
    modules: [Module]
}

type Module {
    id: ID!
    
    instantiationTemplateUsed: ModuleType!
    shelves: [Shelf]
#    totalNumberOfSites: Int! @lambda
    nutrientMix: NutrientMix
}

enum ModuleType {
    DWC_12in_NutrientMixA
    DWC_12in_NutrientMixB
    DWC_24in_NutrientMixA
    DWC_24in_NutrientMixB
    DWC_36in_NutrientMixA
    DWC_36in_NutrientMixB
    VINING
}

enum NutrientMix {
    A
    B
}

type Shelf {
    id: ID!
    
    sites: [Site]
#    numSites: Int! @lambda
    verticalClearanceHeightToNextShelf: Int!
    parentModule: Module @hasInverse(field: shelves)
}

type Site {
    id: ID!
    
    signal: Signal
    occupant: Plant @hasInverse(field: location)
}

type Plant {
    id: ID!
    
    cropName: String! @search
    repeater: Boolean! @search
    nutrientType: String! @search
    germinatedDate: DateTime
    transferredDate: DateTime
    harvestedDate: DateTime
    location: Site @hasInverse(field: occupant)
}

# Abstract meta parameters for a crop.
type Crop {
    id: ID!
    
    name: String!
    required_module_type: String!
    repeater: Boolean!
    days_harvestable: Int!
    days_from_transfer_to_first_harvest: Int!
}

type Seed {
    qr: String!
}

type Drawer {
    gridLocation: Location!
    cropAssignment: Crop
    stock: Int
}

type Location {
    x: Int!
    y: Int!
}

# All of our plants start their lives in the nursery.
type Nursery {
    id: ID!
    
    GerminationTrays: [GerminationTray!]!
#    totalSitesAvailable: Int! @lambda TODO: this lambda function should count the number of sites available in all of the germination trays.
}

type GerminationTray {
    id: ID!
    
    # sitesAvailable: Int! @lambda
    sites: [Site!]!
}

type WaterRoutePresets {
    id: ID!

    presets: [DriveOutputsPreset!]!
}

# The client is responsible for deep copying the preset into here..
# ..is this the right way about this? Could a reference serve better.
# could also implement the copy function  as a lambda.
type ChosenDriveOutputPreset @withSubscription {
    id: ID!

    preset: DriveOutputsPreset!
}

# one idiosyncracy of GraphQL is the lack of ordered Lists.
# As a workaround we store the boolean values in a string deserialize an ordered bool list
type DriveOutputsPreset {
    id: ID!

    boolArrayString: String! # acts like a []bool array. .. perhaps could proxy as a lambda and store a JSON compatible list

    # just a patch for right now - the OPC path into LX
    #    opcPath: String!
    lxEndpoint: Endpoint!
}

type PhysicalSolenoid {
    id: ID!

    outputDriveIndex: Int!
    outputDriveAddr: IpAddr!

    driveState: Boolean!

    influxOutputCurrentTimeSeries: TimeSeries
}

type IpAddr {
    addr: String!
}

type Port {
    port: Int!
}

type Endpoint {
    id: ID!

    addr: IpAddr!
    port: Port!
}

type TimeSeries {
    id: ID!

    addrInfluxInstance: IpAddr!
    portInfluxInstance: Port!

    streamPath: String!
}

