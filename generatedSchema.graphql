#######################
# Input Schema
#######################

input twoNums {
	one: Int!
	two: Int!
}

type CropIntentionsList {
	cropIntentions(filter: CropIntentionFilter, order: CropIntentionOrder, first: Int, offset: Int): [CropIntention!]!
	cropIntentionsAggregate(filter: CropIntentionFilter): CropIntentionAggregateResult
}

type CropIntention {
	crop(filter: CropFilter): Crop!
	harvestPerWeek: Int!
}

type GrowPlate {
	rawNetCupReading: Int
}

type SignalTable {
	signals(filter: SignalFilter, order: SignalOrder, first: Int, offset: Int): [Signal!]!
	signalsAggregate(filter: SignalFilter): SignalAggregateResult
}

type Signal {
	signalDate: DateTime!
	signalType: SignalType!
	plantName: String!
	plantId: String
	targetMessage: String
	algoString: String
	daysToGerminate: Int
	growTime: Int
	maxHarvTime: Int
	moduleType: String!
}

enum SignalType {
	GERMINATE
	TRANSFER
	HARVEST
}

type ModuleMap {
	modules(filter: ModuleFilter, first: Int, offset: Int): [Module]
	modulesAggregate(filter: ModuleFilter): ModuleAggregateResult
}

type Module {
	id: ID!
	shelves(filter: ShelfFilter, order: ShelfOrder, first: Int, offset: Int): [Shelf]
	totalNumberOfSites: Int! @lambda
	nutrientMix: NutrientMix
	shelvesAggregate(filter: ShelfFilter): ShelfAggregateResult
}

enum NutrientMix {
	A
	B
}

type Shelf {
	id: ID!
	sites(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site]
	numSites: Int! @lambda
	verticalClearanceHeightToNextShelf: Int!
	sitesAggregate(filter: SiteFilter): SiteAggregateResult
}

type Site {
	id: ID!
	xid: String! @id
	occupant(filter: PlantFilter): Plant @hasInverse(field: location)
}

type Plant {
	id: ID!
	xid: String
	cropName: String! @search
	repeater: Boolean! @search
	nutrientType: String! @search
	germinatedDate: DateTime
	transferredDate: DateTime
	harvestedDate: DateTime
	location(filter: SiteFilter): Site @hasInverse(field: occupant)
}

type Crop {
	id: ID!
	xid: String
	name: String!
	required_module_type: String!
	repeater: Boolean!
	days_harvestable: Int!
	days_from_transfer_to_first_harvest: Int!
	harvests_per_week: Int!
}

type Seed {
	qr: String!
}

type Drawer {
	gridLocation(filter: LocationFilter): Location!
	cropAssignment(filter: CropFilter): Crop
	stock: Int
}

type Location {
	x: Int!
	y: Int!
}

type Nursery {
	id: ID!
	GerminationTrays(filter: GerminationTrayFilter, order: GerminationTrayOrder, first: Int, offset: Int): [GerminationTray!]!
	GerminationTraysAggregate(filter: GerminationTrayFilter): GerminationTrayAggregateResult
}

type GerminationTray {
	id: ID!
	sitesAvailable: Int!
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 mins 50.52 secs after the 23rd hour of Apr 12th 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddCropIntentionPayload {
	cropIntention(filter: CropIntentionFilter, order: CropIntentionOrder, first: Int, offset: Int): [CropIntention]
	numUids: Int
}

type AddCropIntentionsListPayload {
	cropIntentionsList(filter: CropIntentionsListFilter, first: Int, offset: Int): [CropIntentionsList]
	numUids: Int
}

type AddCropPayload {
	crop(filter: CropFilter, order: CropOrder, first: Int, offset: Int): [Crop]
	numUids: Int
}

type AddDrawerPayload {
	drawer(filter: DrawerFilter, order: DrawerOrder, first: Int, offset: Int): [Drawer]
	numUids: Int
}

type AddGerminationTrayPayload {
	germinationTray(filter: GerminationTrayFilter, order: GerminationTrayOrder, first: Int, offset: Int): [GerminationTray]
	numUids: Int
}

type AddGrowPlatePayload {
	growPlate(filter: GrowPlateFilter, order: GrowPlateOrder, first: Int, offset: Int): [GrowPlate]
	numUids: Int
}

type AddLocationPayload {
	location(filter: LocationFilter, order: LocationOrder, first: Int, offset: Int): [Location]
	numUids: Int
}

type AddModuleMapPayload {
	moduleMap(filter: ModuleMapFilter, first: Int, offset: Int): [ModuleMap]
	numUids: Int
}

type AddModulePayload {
	module(filter: ModuleFilter, first: Int, offset: Int): [Module]
	numUids: Int
}

type AddNurseryPayload {
	nursery(filter: NurseryFilter, first: Int, offset: Int): [Nursery]
	numUids: Int
}

type AddPlantPayload {
	plant(filter: PlantFilter, order: PlantOrder, first: Int, offset: Int): [Plant]
	numUids: Int
}

type AddSeedPayload {
	seed(filter: SeedFilter, order: SeedOrder, first: Int, offset: Int): [Seed]
	numUids: Int
}

type AddShelfPayload {
	shelf(filter: ShelfFilter, order: ShelfOrder, first: Int, offset: Int): [Shelf]
	numUids: Int
}

type AddSignalPayload {
	signal(filter: SignalFilter, order: SignalOrder, first: Int, offset: Int): [Signal]
	numUids: Int
}

type AddSignalTablePayload {
	signalTable(filter: SignalTableFilter, first: Int, offset: Int): [SignalTable]
	numUids: Int
}

type AddSitePayload {
	site(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site]
	numUids: Int
}

type CropAggregateResult {
	count: Int
	xidMin: String
	xidMax: String
	nameMin: String
	nameMax: String
	required_module_typeMin: String
	required_module_typeMax: String
	days_harvestableMin: Int
	days_harvestableMax: Int
	days_harvestableSum: Int
	days_harvestableAvg: Float
	days_from_transfer_to_first_harvestMin: Int
	days_from_transfer_to_first_harvestMax: Int
	days_from_transfer_to_first_harvestSum: Int
	days_from_transfer_to_first_harvestAvg: Float
	harvests_per_weekMin: Int
	harvests_per_weekMax: Int
	harvests_per_weekSum: Int
	harvests_per_weekAvg: Float
}

type CropIntentionAggregateResult {
	count: Int
	harvestPerWeekMin: Int
	harvestPerWeekMax: Int
	harvestPerWeekSum: Int
	harvestPerWeekAvg: Float
}

type CropIntentionsListAggregateResult {
	count: Int
}

type DeleteCropIntentionPayload {
	cropIntention(filter: CropIntentionFilter, order: CropIntentionOrder, first: Int, offset: Int): [CropIntention]
	msg: String
	numUids: Int
}

type DeleteCropIntentionsListPayload {
	cropIntentionsList(filter: CropIntentionsListFilter, first: Int, offset: Int): [CropIntentionsList]
	msg: String
	numUids: Int
}

type DeleteCropPayload {
	crop(filter: CropFilter, order: CropOrder, first: Int, offset: Int): [Crop]
	msg: String
	numUids: Int
}

type DeleteDrawerPayload {
	drawer(filter: DrawerFilter, order: DrawerOrder, first: Int, offset: Int): [Drawer]
	msg: String
	numUids: Int
}

type DeleteGerminationTrayPayload {
	germinationTray(filter: GerminationTrayFilter, order: GerminationTrayOrder, first: Int, offset: Int): [GerminationTray]
	msg: String
	numUids: Int
}

type DeleteGrowPlatePayload {
	growPlate(filter: GrowPlateFilter, order: GrowPlateOrder, first: Int, offset: Int): [GrowPlate]
	msg: String
	numUids: Int
}

type DeleteLocationPayload {
	location(filter: LocationFilter, order: LocationOrder, first: Int, offset: Int): [Location]
	msg: String
	numUids: Int
}

type DeleteModuleMapPayload {
	moduleMap(filter: ModuleMapFilter, first: Int, offset: Int): [ModuleMap]
	msg: String
	numUids: Int
}

type DeleteModulePayload {
	module(filter: ModuleFilter, first: Int, offset: Int): [Module]
	msg: String
	numUids: Int
}

type DeleteNurseryPayload {
	nursery(filter: NurseryFilter, first: Int, offset: Int): [Nursery]
	msg: String
	numUids: Int
}

type DeletePlantPayload {
	plant(filter: PlantFilter, order: PlantOrder, first: Int, offset: Int): [Plant]
	msg: String
	numUids: Int
}

type DeleteSeedPayload {
	seed(filter: SeedFilter, order: SeedOrder, first: Int, offset: Int): [Seed]
	msg: String
	numUids: Int
}

type DeleteShelfPayload {
	shelf(filter: ShelfFilter, order: ShelfOrder, first: Int, offset: Int): [Shelf]
	msg: String
	numUids: Int
}

type DeleteSignalPayload {
	signal(filter: SignalFilter, order: SignalOrder, first: Int, offset: Int): [Signal]
	msg: String
	numUids: Int
}

type DeleteSignalTablePayload {
	signalTable(filter: SignalTableFilter, first: Int, offset: Int): [SignalTable]
	msg: String
	numUids: Int
}

type DeleteSitePayload {
	site(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site]
	msg: String
	numUids: Int
}

type DrawerAggregateResult {
	count: Int
	stockMin: Int
	stockMax: Int
	stockSum: Int
	stockAvg: Float
}

type GerminationTrayAggregateResult {
	count: Int
	sitesAvailableMin: Int
	sitesAvailableMax: Int
	sitesAvailableSum: Int
	sitesAvailableAvg: Float
}

type GrowPlateAggregateResult {
	count: Int
	rawNetCupReadingMin: Int
	rawNetCupReadingMax: Int
	rawNetCupReadingSum: Int
	rawNetCupReadingAvg: Float
}

type LocationAggregateResult {
	count: Int
	xMin: Int
	xMax: Int
	xSum: Int
	xAvg: Float
	yMin: Int
	yMax: Int
	ySum: Int
	yAvg: Float
}

type ModuleAggregateResult {
	count: Int
}

type ModuleMapAggregateResult {
	count: Int
}

type NurseryAggregateResult {
	count: Int
}

type PlantAggregateResult {
	count: Int
	xidMin: String
	xidMax: String
	cropNameMin: String
	cropNameMax: String
	nutrientTypeMin: String
	nutrientTypeMax: String
	germinatedDateMin: DateTime
	germinatedDateMax: DateTime
	transferredDateMin: DateTime
	transferredDateMax: DateTime
	harvestedDateMin: DateTime
	harvestedDateMax: DateTime
}

type SeedAggregateResult {
	count: Int
	qrMin: String
	qrMax: String
}

type ShelfAggregateResult {
	count: Int
	verticalClearanceHeightToNextShelfMin: Int
	verticalClearanceHeightToNextShelfMax: Int
	verticalClearanceHeightToNextShelfSum: Int
	verticalClearanceHeightToNextShelfAvg: Float
}

type SignalAggregateResult {
	count: Int
	signalDateMin: DateTime
	signalDateMax: DateTime
	plantNameMin: String
	plantNameMax: String
	plantIdMin: String
	plantIdMax: String
	targetMessageMin: String
	targetMessageMax: String
	algoStringMin: String
	algoStringMax: String
	daysToGerminateMin: Int
	daysToGerminateMax: Int
	daysToGerminateSum: Int
	daysToGerminateAvg: Float
	growTimeMin: Int
	growTimeMax: Int
	growTimeSum: Int
	growTimeAvg: Float
	maxHarvTimeMin: Int
	maxHarvTimeMax: Int
	maxHarvTimeSum: Int
	maxHarvTimeAvg: Float
	moduleTypeMin: String
	moduleTypeMax: String
}

type SignalTableAggregateResult {
	count: Int
}

type SiteAggregateResult {
	count: Int
	xidMin: String
	xidMax: String
}

type UpdateCropIntentionPayload {
	cropIntention(filter: CropIntentionFilter, order: CropIntentionOrder, first: Int, offset: Int): [CropIntention]
	numUids: Int
}

type UpdateCropIntentionsListPayload {
	cropIntentionsList(filter: CropIntentionsListFilter, first: Int, offset: Int): [CropIntentionsList]
	numUids: Int
}

type UpdateCropPayload {
	crop(filter: CropFilter, order: CropOrder, first: Int, offset: Int): [Crop]
	numUids: Int
}

type UpdateDrawerPayload {
	drawer(filter: DrawerFilter, order: DrawerOrder, first: Int, offset: Int): [Drawer]
	numUids: Int
}

type UpdateGerminationTrayPayload {
	germinationTray(filter: GerminationTrayFilter, order: GerminationTrayOrder, first: Int, offset: Int): [GerminationTray]
	numUids: Int
}

type UpdateGrowPlatePayload {
	growPlate(filter: GrowPlateFilter, order: GrowPlateOrder, first: Int, offset: Int): [GrowPlate]
	numUids: Int
}

type UpdateLocationPayload {
	location(filter: LocationFilter, order: LocationOrder, first: Int, offset: Int): [Location]
	numUids: Int
}

type UpdateModuleMapPayload {
	moduleMap(filter: ModuleMapFilter, first: Int, offset: Int): [ModuleMap]
	numUids: Int
}

type UpdateModulePayload {
	module(filter: ModuleFilter, first: Int, offset: Int): [Module]
	numUids: Int
}

type UpdateNurseryPayload {
	nursery(filter: NurseryFilter, first: Int, offset: Int): [Nursery]
	numUids: Int
}

type UpdatePlantPayload {
	plant(filter: PlantFilter, order: PlantOrder, first: Int, offset: Int): [Plant]
	numUids: Int
}

type UpdateSeedPayload {
	seed(filter: SeedFilter, order: SeedOrder, first: Int, offset: Int): [Seed]
	numUids: Int
}

type UpdateShelfPayload {
	shelf(filter: ShelfFilter, order: ShelfOrder, first: Int, offset: Int): [Shelf]
	numUids: Int
}

type UpdateSignalPayload {
	signal(filter: SignalFilter, order: SignalOrder, first: Int, offset: Int): [Signal]
	numUids: Int
}

type UpdateSignalTablePayload {
	signalTable(filter: SignalTableFilter, first: Int, offset: Int): [SignalTable]
	numUids: Int
}

type UpdateSitePayload {
	site(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum CropHasFilter {
	xid
	name
	required_module_type
	repeater
	days_harvestable
	days_from_transfer_to_first_harvest
	harvests_per_week
}

enum CropIntentionHasFilter {
	crop
	harvestPerWeek
}

enum CropIntentionOrderable {
	harvestPerWeek
}

enum CropIntentionsListHasFilter {
	cropIntentions
}

enum CropOrderable {
	xid
	name
	required_module_type
	days_harvestable
	days_from_transfer_to_first_harvest
	harvests_per_week
}

enum DrawerHasFilter {
	gridLocation
	cropAssignment
	stock
}

enum DrawerOrderable {
	stock
}

enum GerminationTrayHasFilter {
	sitesAvailable
}

enum GerminationTrayOrderable {
	sitesAvailable
}

enum GrowPlateHasFilter {
	rawNetCupReading
}

enum GrowPlateOrderable {
	rawNetCupReading
}

enum LocationHasFilter {
	x
	y
}

enum LocationOrderable {
	x
	y
}

enum ModuleHasFilter {
	shelves
	nutrientMix
}

enum ModuleMapHasFilter {
	modules
}

enum NurseryHasFilter {
	GerminationTrays
}

enum PlantHasFilter {
	xid
	cropName
	repeater
	nutrientType
	germinatedDate
	transferredDate
	harvestedDate
	location
}

enum PlantOrderable {
	xid
	cropName
	nutrientType
	germinatedDate
	transferredDate
	harvestedDate
}

enum SeedHasFilter {
	qr
}

enum SeedOrderable {
	qr
}

enum ShelfHasFilter {
	sites
	verticalClearanceHeightToNextShelf
}

enum ShelfOrderable {
	verticalClearanceHeightToNextShelf
}

enum SignalHasFilter {
	signalDate
	signalType
	plantName
	plantId
	targetMessage
	algoString
	daysToGerminate
	growTime
	maxHarvTime
	moduleType
}

enum SignalOrderable {
	signalDate
	plantName
	plantId
	targetMessage
	algoString
	daysToGerminate
	growTime
	maxHarvTime
	moduleType
}

enum SignalTableHasFilter {
	signals
}

enum SiteHasFilter {
	xid
	occupant
}

enum SiteOrderable {
	xid
}

#######################
# Generated Inputs
#######################

input AddCropInput {
	xid: String
	name: String!
	required_module_type: String!
	repeater: Boolean!
	days_harvestable: Int!
	days_from_transfer_to_first_harvest: Int!
	harvests_per_week: Int!
}

input AddCropIntentionInput {
	crop: CropRef!
	harvestPerWeek: Int!
}

input AddCropIntentionsListInput {
	cropIntentions: [CropIntentionRef!]!
}

input AddDrawerInput {
	gridLocation: LocationRef!
	cropAssignment: CropRef
	stock: Int
}

input AddGerminationTrayInput {
	sitesAvailable: Int!
}

input AddGrowPlateInput {
	rawNetCupReading: Int
}

input AddLocationInput {
	x: Int!
	y: Int!
}

input AddModuleInput {
	shelves: [ShelfRef]
	nutrientMix: NutrientMix
}

input AddModuleMapInput {
	modules: [ModuleRef]
}

input AddNurseryInput {
	GerminationTrays: [GerminationTrayRef!]!
}

input AddPlantInput {
	xid: String
	cropName: String!
	repeater: Boolean!
	nutrientType: String!
	germinatedDate: DateTime
	transferredDate: DateTime
	harvestedDate: DateTime
	location: SiteRef
}

input AddSeedInput {
	qr: String!
}

input AddShelfInput {
	sites: [SiteRef]
	verticalClearanceHeightToNextShelf: Int!
}

input AddSignalInput {
	signalDate: DateTime!
	signalType: SignalType!
	plantName: String!
	plantId: String
	targetMessage: String
	algoString: String
	daysToGerminate: Int
	growTime: Int
	maxHarvTime: Int
	moduleType: String!
}

input AddSignalTableInput {
	signals: [SignalRef!]!
}

input AddSiteInput {
	xid: String!
	occupant: PlantRef
}

input CropFilter {
	id: [ID!]
	has: [CropHasFilter]
	and: [CropFilter]
	or: [CropFilter]
	not: CropFilter
}

input CropIntentionFilter {
	has: [CropIntentionHasFilter]
	and: [CropIntentionFilter]
	or: [CropIntentionFilter]
	not: CropIntentionFilter
}

input CropIntentionOrder {
	asc: CropIntentionOrderable
	desc: CropIntentionOrderable
	then: CropIntentionOrder
}

input CropIntentionPatch {
	crop: CropRef
	harvestPerWeek: Int
}

input CropIntentionRef {
	crop: CropRef
	harvestPerWeek: Int
}

input CropIntentionsListFilter {
	has: [CropIntentionsListHasFilter]
	and: [CropIntentionsListFilter]
	or: [CropIntentionsListFilter]
	not: CropIntentionsListFilter
}

input CropIntentionsListPatch {
	cropIntentions: [CropIntentionRef!]
}

input CropIntentionsListRef {
	cropIntentions: [CropIntentionRef!]
}

input CropOrder {
	asc: CropOrderable
	desc: CropOrderable
	then: CropOrder
}

input CropPatch {
	xid: String
	name: String
	required_module_type: String
	repeater: Boolean
	days_harvestable: Int
	days_from_transfer_to_first_harvest: Int
	harvests_per_week: Int
}

input CropRef {
	id: ID
	xid: String
	name: String
	required_module_type: String
	repeater: Boolean
	days_harvestable: Int
	days_from_transfer_to_first_harvest: Int
	harvests_per_week: Int
}

input DrawerFilter {
	has: [DrawerHasFilter]
	and: [DrawerFilter]
	or: [DrawerFilter]
	not: DrawerFilter
}

input DrawerOrder {
	asc: DrawerOrderable
	desc: DrawerOrderable
	then: DrawerOrder
}

input DrawerPatch {
	gridLocation: LocationRef
	cropAssignment: CropRef
	stock: Int
}

input DrawerRef {
	gridLocation: LocationRef
	cropAssignment: CropRef
	stock: Int
}

input GerminationTrayFilter {
	id: [ID!]
	has: [GerminationTrayHasFilter]
	and: [GerminationTrayFilter]
	or: [GerminationTrayFilter]
	not: GerminationTrayFilter
}

input GerminationTrayOrder {
	asc: GerminationTrayOrderable
	desc: GerminationTrayOrderable
	then: GerminationTrayOrder
}

input GerminationTrayPatch {
	sitesAvailable: Int
}

input GerminationTrayRef {
	id: ID
	sitesAvailable: Int
}

input GrowPlateFilter {
	has: [GrowPlateHasFilter]
	and: [GrowPlateFilter]
	or: [GrowPlateFilter]
	not: GrowPlateFilter
}

input GrowPlateOrder {
	asc: GrowPlateOrderable
	desc: GrowPlateOrderable
	then: GrowPlateOrder
}

input GrowPlatePatch {
	rawNetCupReading: Int
}

input GrowPlateRef {
	rawNetCupReading: Int
}

input LocationFilter {
	has: [LocationHasFilter]
	and: [LocationFilter]
	or: [LocationFilter]
	not: LocationFilter
}

input LocationOrder {
	asc: LocationOrderable
	desc: LocationOrderable
	then: LocationOrder
}

input LocationPatch {
	x: Int
	y: Int
}

input LocationRef {
	x: Int
	y: Int
}

input ModuleFilter {
	id: [ID!]
	has: [ModuleHasFilter]
	and: [ModuleFilter]
	or: [ModuleFilter]
	not: ModuleFilter
}

input ModuleMapFilter {
	has: [ModuleMapHasFilter]
	and: [ModuleMapFilter]
	or: [ModuleMapFilter]
	not: ModuleMapFilter
}

input ModuleMapPatch {
	modules: [ModuleRef]
}

input ModuleMapRef {
	modules: [ModuleRef]
}

input ModulePatch {
	shelves: [ShelfRef]
	nutrientMix: NutrientMix
}

input ModuleRef {
	id: ID
	shelves: [ShelfRef]
	nutrientMix: NutrientMix
}

input NurseryFilter {
	id: [ID!]
	has: [NurseryHasFilter]
	and: [NurseryFilter]
	or: [NurseryFilter]
	not: NurseryFilter
}

input NurseryPatch {
	GerminationTrays: [GerminationTrayRef!]
}

input NurseryRef {
	id: ID
	GerminationTrays: [GerminationTrayRef!]
}

input PlantFilter {
	id: [ID!]
	cropName: StringTermFilter
	repeater: Boolean
	nutrientType: StringTermFilter
	has: [PlantHasFilter]
	and: [PlantFilter]
	or: [PlantFilter]
	not: PlantFilter
}

input PlantOrder {
	asc: PlantOrderable
	desc: PlantOrderable
	then: PlantOrder
}

input PlantPatch {
	xid: String
	cropName: String
	repeater: Boolean
	nutrientType: String
	germinatedDate: DateTime
	transferredDate: DateTime
	harvestedDate: DateTime
	location: SiteRef
}

input PlantRef {
	id: ID
	xid: String
	cropName: String
	repeater: Boolean
	nutrientType: String
	germinatedDate: DateTime
	transferredDate: DateTime
	harvestedDate: DateTime
	location: SiteRef
}

input SeedFilter {
	has: [SeedHasFilter]
	and: [SeedFilter]
	or: [SeedFilter]
	not: SeedFilter
}

input SeedOrder {
	asc: SeedOrderable
	desc: SeedOrderable
	then: SeedOrder
}

input SeedPatch {
	qr: String
}

input SeedRef {
	qr: String
}

input ShelfFilter {
	id: [ID!]
	has: [ShelfHasFilter]
	and: [ShelfFilter]
	or: [ShelfFilter]
	not: ShelfFilter
}

input ShelfOrder {
	asc: ShelfOrderable
	desc: ShelfOrderable
	then: ShelfOrder
}

input ShelfPatch {
	sites: [SiteRef]
	verticalClearanceHeightToNextShelf: Int
}

input ShelfRef {
	id: ID
	sites: [SiteRef]
	verticalClearanceHeightToNextShelf: Int
}

input SignalFilter {
	has: [SignalHasFilter]
	and: [SignalFilter]
	or: [SignalFilter]
	not: SignalFilter
}

input SignalOrder {
	asc: SignalOrderable
	desc: SignalOrderable
	then: SignalOrder
}

input SignalPatch {
	signalDate: DateTime
	signalType: SignalType
	plantName: String
	plantId: String
	targetMessage: String
	algoString: String
	daysToGerminate: Int
	growTime: Int
	maxHarvTime: Int
	moduleType: String
}

input SignalRef {
	signalDate: DateTime
	signalType: SignalType
	plantName: String
	plantId: String
	targetMessage: String
	algoString: String
	daysToGerminate: Int
	growTime: Int
	maxHarvTime: Int
	moduleType: String
}

input SignalTableFilter {
	has: [SignalTableHasFilter]
	and: [SignalTableFilter]
	or: [SignalTableFilter]
	not: SignalTableFilter
}

input SignalTablePatch {
	signals: [SignalRef!]
}

input SignalTableRef {
	signals: [SignalRef!]
}

input SiteFilter {
	id: [ID!]
	xid: StringHashFilter
	has: [SiteHasFilter]
	and: [SiteFilter]
	or: [SiteFilter]
	not: SiteFilter
}

input SiteOrder {
	asc: SiteOrderable
	desc: SiteOrderable
	then: SiteOrder
}

input SitePatch {
	occupant: PlantRef
}

input SiteRef {
	id: ID
	xid: String
	occupant: PlantRef
}

input UpdateCropInput {
	filter: CropFilter!
	set: CropPatch
	remove: CropPatch
}

input UpdateCropIntentionInput {
	filter: CropIntentionFilter!
	set: CropIntentionPatch
	remove: CropIntentionPatch
}

input UpdateCropIntentionsListInput {
	filter: CropIntentionsListFilter!
	set: CropIntentionsListPatch
	remove: CropIntentionsListPatch
}

input UpdateDrawerInput {
	filter: DrawerFilter!
	set: DrawerPatch
	remove: DrawerPatch
}

input UpdateGerminationTrayInput {
	filter: GerminationTrayFilter!
	set: GerminationTrayPatch
	remove: GerminationTrayPatch
}

input UpdateGrowPlateInput {
	filter: GrowPlateFilter!
	set: GrowPlatePatch
	remove: GrowPlatePatch
}

input UpdateLocationInput {
	filter: LocationFilter!
	set: LocationPatch
	remove: LocationPatch
}

input UpdateModuleInput {
	filter: ModuleFilter!
	set: ModulePatch
	remove: ModulePatch
}

input UpdateModuleMapInput {
	filter: ModuleMapFilter!
	set: ModuleMapPatch
	remove: ModuleMapPatch
}

input UpdateNurseryInput {
	filter: NurseryFilter!
	set: NurseryPatch
	remove: NurseryPatch
}

input UpdatePlantInput {
	filter: PlantFilter!
	set: PlantPatch
	remove: PlantPatch
}

input UpdateSeedInput {
	filter: SeedFilter!
	set: SeedPatch
	remove: SeedPatch
}

input UpdateShelfInput {
	filter: ShelfFilter!
	set: ShelfPatch
	remove: ShelfPatch
}

input UpdateSignalInput {
	filter: SignalFilter!
	set: SignalPatch
	remove: SignalPatch
}

input UpdateSignalTableInput {
	filter: SignalTableFilter!
	set: SignalTablePatch
	remove: SignalTablePatch
}

input UpdateSiteInput {
	filter: SiteFilter!
	set: SitePatch
	remove: SitePatch
}

#######################
# Generated Query
#######################

type Query {
	exampleLambda(exampleStringInput: String!): String! @lambda
	addTwo(one: Int!, two: Int!): Int! @lambda
	queryCropIntentionsList(filter: CropIntentionsListFilter, first: Int, offset: Int): [CropIntentionsList]
	aggregateCropIntentionsList(filter: CropIntentionsListFilter): CropIntentionsListAggregateResult
	queryCropIntention(filter: CropIntentionFilter, order: CropIntentionOrder, first: Int, offset: Int): [CropIntention]
	aggregateCropIntention(filter: CropIntentionFilter): CropIntentionAggregateResult
	queryGrowPlate(filter: GrowPlateFilter, order: GrowPlateOrder, first: Int, offset: Int): [GrowPlate]
	aggregateGrowPlate(filter: GrowPlateFilter): GrowPlateAggregateResult
	querySignalTable(filter: SignalTableFilter, first: Int, offset: Int): [SignalTable]
	aggregateSignalTable(filter: SignalTableFilter): SignalTableAggregateResult
	querySignal(filter: SignalFilter, order: SignalOrder, first: Int, offset: Int): [Signal]
	aggregateSignal(filter: SignalFilter): SignalAggregateResult
	queryModuleMap(filter: ModuleMapFilter, first: Int, offset: Int): [ModuleMap]
	aggregateModuleMap(filter: ModuleMapFilter): ModuleMapAggregateResult
	getModule(id: ID!): Module
	queryModule(filter: ModuleFilter, first: Int, offset: Int): [Module]
	aggregateModule(filter: ModuleFilter): ModuleAggregateResult
	getShelf(id: ID!): Shelf
	queryShelf(filter: ShelfFilter, order: ShelfOrder, first: Int, offset: Int): [Shelf]
	aggregateShelf(filter: ShelfFilter): ShelfAggregateResult
	getSite(id: ID, xid: String): Site
	querySite(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site]
	aggregateSite(filter: SiteFilter): SiteAggregateResult
	getPlant(id: ID!): Plant
	queryPlant(filter: PlantFilter, order: PlantOrder, first: Int, offset: Int): [Plant]
	aggregatePlant(filter: PlantFilter): PlantAggregateResult
	getCrop(id: ID!): Crop
	queryCrop(filter: CropFilter, order: CropOrder, first: Int, offset: Int): [Crop]
	aggregateCrop(filter: CropFilter): CropAggregateResult
	querySeed(filter: SeedFilter, order: SeedOrder, first: Int, offset: Int): [Seed]
	aggregateSeed(filter: SeedFilter): SeedAggregateResult
	queryDrawer(filter: DrawerFilter, order: DrawerOrder, first: Int, offset: Int): [Drawer]
	aggregateDrawer(filter: DrawerFilter): DrawerAggregateResult
	queryLocation(filter: LocationFilter, order: LocationOrder, first: Int, offset: Int): [Location]
	aggregateLocation(filter: LocationFilter): LocationAggregateResult
	getNursery(id: ID!): Nursery
	queryNursery(filter: NurseryFilter, first: Int, offset: Int): [Nursery]
	aggregateNursery(filter: NurseryFilter): NurseryAggregateResult
	getGerminationTray(id: ID!): GerminationTray
	queryGerminationTray(filter: GerminationTrayFilter, order: GerminationTrayOrder, first: Int, offset: Int): [GerminationTray]
	aggregateGerminationTray(filter: GerminationTrayFilter): GerminationTrayAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	ingestQR(qr: String!): String! @lambda
	addCropIntentionsList(input: [AddCropIntentionsListInput!]!): AddCropIntentionsListPayload
	updateCropIntentionsList(input: UpdateCropIntentionsListInput!): UpdateCropIntentionsListPayload
	deleteCropIntentionsList(filter: CropIntentionsListFilter!): DeleteCropIntentionsListPayload
	addCropIntention(input: [AddCropIntentionInput!]!): AddCropIntentionPayload
	updateCropIntention(input: UpdateCropIntentionInput!): UpdateCropIntentionPayload
	deleteCropIntention(filter: CropIntentionFilter!): DeleteCropIntentionPayload
	addGrowPlate(input: [AddGrowPlateInput!]!): AddGrowPlatePayload
	updateGrowPlate(input: UpdateGrowPlateInput!): UpdateGrowPlatePayload
	deleteGrowPlate(filter: GrowPlateFilter!): DeleteGrowPlatePayload
	addSignalTable(input: [AddSignalTableInput!]!): AddSignalTablePayload
	updateSignalTable(input: UpdateSignalTableInput!): UpdateSignalTablePayload
	deleteSignalTable(filter: SignalTableFilter!): DeleteSignalTablePayload
	addSignal(input: [AddSignalInput!]!): AddSignalPayload
	updateSignal(input: UpdateSignalInput!): UpdateSignalPayload
	deleteSignal(filter: SignalFilter!): DeleteSignalPayload
	addModuleMap(input: [AddModuleMapInput!]!): AddModuleMapPayload
	updateModuleMap(input: UpdateModuleMapInput!): UpdateModuleMapPayload
	deleteModuleMap(filter: ModuleMapFilter!): DeleteModuleMapPayload
	addModule(input: [AddModuleInput!]!): AddModulePayload
	updateModule(input: UpdateModuleInput!): UpdateModulePayload
	deleteModule(filter: ModuleFilter!): DeleteModulePayload
	addShelf(input: [AddShelfInput!]!): AddShelfPayload
	updateShelf(input: UpdateShelfInput!): UpdateShelfPayload
	deleteShelf(filter: ShelfFilter!): DeleteShelfPayload
	addSite(input: [AddSiteInput!]!, upsert: Boolean): AddSitePayload
	updateSite(input: UpdateSiteInput!): UpdateSitePayload
	deleteSite(filter: SiteFilter!): DeleteSitePayload
	addPlant(input: [AddPlantInput!]!): AddPlantPayload
	updatePlant(input: UpdatePlantInput!): UpdatePlantPayload
	deletePlant(filter: PlantFilter!): DeletePlantPayload
	addCrop(input: [AddCropInput!]!): AddCropPayload
	updateCrop(input: UpdateCropInput!): UpdateCropPayload
	deleteCrop(filter: CropFilter!): DeleteCropPayload
	addSeed(input: [AddSeedInput!]!): AddSeedPayload
	updateSeed(input: UpdateSeedInput!): UpdateSeedPayload
	deleteSeed(filter: SeedFilter!): DeleteSeedPayload
	addDrawer(input: [AddDrawerInput!]!): AddDrawerPayload
	updateDrawer(input: UpdateDrawerInput!): UpdateDrawerPayload
	deleteDrawer(filter: DrawerFilter!): DeleteDrawerPayload
	addLocation(input: [AddLocationInput!]!): AddLocationPayload
	updateLocation(input: UpdateLocationInput!): UpdateLocationPayload
	deleteLocation(filter: LocationFilter!): DeleteLocationPayload
	addNursery(input: [AddNurseryInput!]!): AddNurseryPayload
	updateNursery(input: UpdateNurseryInput!): UpdateNurseryPayload
	deleteNursery(filter: NurseryFilter!): DeleteNurseryPayload
	addGerminationTray(input: [AddGerminationTrayInput!]!): AddGerminationTrayPayload
	updateGerminationTray(input: UpdateGerminationTrayInput!): UpdateGerminationTrayPayload
	deleteGerminationTray(filter: GerminationTrayFilter!): DeleteGerminationTrayPayload
}

