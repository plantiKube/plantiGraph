#######################
# Input Schema
#######################

input twoNums {
	one: Int!
	two: Int!
}

type CropIntentionsList {
	cropIntentions(filter: CropIntentionFilter, order: CropIntentionOrder, first: Int, offset: Int): [CropIntention!]!
	cropIntentionsAggregate(filter: CropIntentionFilter): CropIntentionAggregateResult
}

type CropIntention {
	crop(filter: CropFilter): Crop!
	harvestPerWeek: Int!
}

type GrowPlate {
	rawNetCupReading: Int
}

type SignalTable {
	id: ID!
	signals(filter: SignalFilter, order: SignalOrder, first: Int, offset: Int): [Signal!]!
	signalsAggregate(filter: SignalFilter): SignalAggregateResult
}

type Signal {
	id: ID!
	signalDate: DateTime! @search
	signalType: SignalType!
	plantName: String
	plantId: String
	targetMessage: String
	algoString: String
	daysToGerminate: Int
	growTime: Int
	maxHarvTime: Int
	moduleType: String
}

enum SignalType {
	GERMINATE
	TRANSFER
	HARVEST
	NONE
}

type ModuleMap {
	id: ID!
	modules(filter: ModuleFilter, first: Int, offset: Int): [Module]
	modulesAggregate(filter: ModuleFilter): ModuleAggregateResult
}

type Module {
	id: ID!
	instantiationTemplateUsed: ModuleType!
	shelves(filter: ShelfFilter, order: ShelfOrder, first: Int, offset: Int): [Shelf] @hasInverse(field: parentModule)
	nutrientMix: NutrientMix
	shelvesAggregate(filter: ShelfFilter): ShelfAggregateResult
}

enum ModuleType {
	DWC_12in_NutrientMixA
	DWC_12in_NutrientMixB
	DWC_24in_NutrientMixA
	DWC_24in_NutrientMixB
	DWC_36in_NutrientMixA
	DWC_36in_NutrientMixB
	VINING
}

enum NutrientMix {
	A
	B
}

type Shelf {
	id: ID!
	sites(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site]
	verticalClearanceHeightToNextShelf: Int!
	parentModule(filter: ModuleFilter): Module @hasInverse(field: shelves)
	sitesAggregate(filter: SiteFilter): SiteAggregateResult
}

type FlattenedSiteArray {
	id: ID!
	sites(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site!]! @hasInverse(field: parentArray)
	sitesAggregate(filter: SiteFilter): SiteAggregateResult
}

type Site {
	id: ID!
	uuid: Int! @id
	signal(filter: SignalFilter): Signal
	halPresence: Boolean
	occupant(filter: PlantFilter): Plant @hasInverse(field: location)
	parentArray(filter: FlattenedSiteArrayFilter): FlattenedSiteArray @hasInverse(field: sites)
}

type Plant {
	id: ID!
	cropName: String! @search
	repeater: Boolean! @search
	nutrientType: String! @search
	germinatedDate: DateTime
	transferredDate: DateTime
	harvestedDate: DateTime
	location(filter: SiteFilter): Site @hasInverse(field: occupant)
}

type Crop {
	id: ID!
	name: String!
	required_module_type: String!
	repeater: Boolean!
	days_harvestable: Int!
	days_from_transfer_to_first_harvest: Int!
}

type Seed {
	qr: String!
}

type Drawer {
	gridLocation(filter: LocationFilter): Location!
	cropAssignment(filter: CropFilter): Crop
	stock: Int
}

type Location {
	x: Int!
	y: Int!
}

type Nursery {
	id: ID!
	GerminationTrays(filter: GerminationTrayFilter, first: Int, offset: Int): [GerminationTray!]!
	GerminationTraysAggregate(filter: GerminationTrayFilter): GerminationTrayAggregateResult
}

type GerminationTray {
	id: ID!
	sites(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site!]!
	sitesAggregate(filter: SiteFilter): SiteAggregateResult
}

type WaterRoutePresets {
	id: ID!
	presets(filter: DriveOutputsPresetFilter, order: DriveOutputsPresetOrder, first: Int, offset: Int): [DriveOutputsPreset!]!
	presetsAggregate(filter: DriveOutputsPresetFilter): DriveOutputsPresetAggregateResult
}

type ChosenDriveOutputPreset @withSubscription {
	id: ID!
	preset(filter: DriveOutputsPresetFilter): DriveOutputsPreset!
}

type DriveOutputsPreset {
	id: ID!
	boolArrayString: String!
	lxEndpoint(filter: EndpointFilter): Endpoint!
}

type PhysicalSolenoid {
	id: ID!
	outputDriveIndex: Int!
	outputDriveAddr(filter: IpAddrFilter): IpAddr!
	driveState: Boolean!
	influxOutputCurrentTimeSeries(filter: TimeSeriesFilter): TimeSeries
}

type IpAddr {
	addr: String!
}

type Port {
	port: Int!
}

type Endpoint {
	id: ID!
	addr(filter: IpAddrFilter): IpAddr!
	port(filter: PortFilter): Port!
}

type TimeSeries {
	id: ID!
	addrInfluxInstance(filter: IpAddrFilter): IpAddr!
	portInfluxInstance(filter: PortFilter): Port!
	streamPath: String!
}

type AutomationClock {
	id: ID!
	clockNodes(filter: ClockNodePointFilter, order: ClockNodePointOrder, first: Int, offset: Int): [ClockNodePoint!]! @hasInverse(field: ownedByClock)
	clockNodesAggregate(filter: ClockNodePointFilter): ClockNodePointAggregateResult
}

type ClockNodePoint {
	id: ID!
	xid: Int! @id
	ownedByClock(filter: AutomationClockFilter): AutomationClock @hasInverse(field: clockNodes)
	timeOfDay: DateTime! @search
	oscPath: String!
	outputState: Int!
}

type ExampleObject {
	id: ID!
	someData: String!
	someTime: DateTime!
}

type JonsObject {
	id: ID!
	someData: String!
	someTime: DateTime! @search
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 mins 50.52 secs after the 23rd hour of Apr 12th 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddAutomationClockPayload {
	automationClock(filter: AutomationClockFilter, first: Int, offset: Int): [AutomationClock]
	numUids: Int
}

type AddChosenDriveOutputPresetPayload {
	chosenDriveOutputPreset(filter: ChosenDriveOutputPresetFilter, first: Int, offset: Int): [ChosenDriveOutputPreset]
	numUids: Int
}

type AddClockNodePointPayload {
	clockNodePoint(filter: ClockNodePointFilter, order: ClockNodePointOrder, first: Int, offset: Int): [ClockNodePoint]
	numUids: Int
}

type AddCropIntentionPayload {
	cropIntention(filter: CropIntentionFilter, order: CropIntentionOrder, first: Int, offset: Int): [CropIntention]
	numUids: Int
}

type AddCropIntentionsListPayload {
	cropIntentionsList(filter: CropIntentionsListFilter, first: Int, offset: Int): [CropIntentionsList]
	numUids: Int
}

type AddCropPayload {
	crop(filter: CropFilter, order: CropOrder, first: Int, offset: Int): [Crop]
	numUids: Int
}

type AddDrawerPayload {
	drawer(filter: DrawerFilter, order: DrawerOrder, first: Int, offset: Int): [Drawer]
	numUids: Int
}

type AddDriveOutputsPresetPayload {
	driveOutputsPreset(filter: DriveOutputsPresetFilter, order: DriveOutputsPresetOrder, first: Int, offset: Int): [DriveOutputsPreset]
	numUids: Int
}

type AddEndpointPayload {
	endpoint(filter: EndpointFilter, first: Int, offset: Int): [Endpoint]
	numUids: Int
}

type AddExampleObjectPayload {
	exampleObject(filter: ExampleObjectFilter, order: ExampleObjectOrder, first: Int, offset: Int): [ExampleObject]
	numUids: Int
}

type AddFlattenedSiteArrayPayload {
	flattenedSiteArray(filter: FlattenedSiteArrayFilter, first: Int, offset: Int): [FlattenedSiteArray]
	numUids: Int
}

type AddGerminationTrayPayload {
	germinationTray(filter: GerminationTrayFilter, first: Int, offset: Int): [GerminationTray]
	numUids: Int
}

type AddGrowPlatePayload {
	growPlate(filter: GrowPlateFilter, order: GrowPlateOrder, first: Int, offset: Int): [GrowPlate]
	numUids: Int
}

type AddIpAddrPayload {
	ipAddr(filter: IpAddrFilter, order: IpAddrOrder, first: Int, offset: Int): [IpAddr]
	numUids: Int
}

type AddJonsObjectPayload {
	jonsObject(filter: JonsObjectFilter, order: JonsObjectOrder, first: Int, offset: Int): [JonsObject]
	numUids: Int
}

type AddLocationPayload {
	location(filter: LocationFilter, order: LocationOrder, first: Int, offset: Int): [Location]
	numUids: Int
}

type AddModuleMapPayload {
	moduleMap(filter: ModuleMapFilter, first: Int, offset: Int): [ModuleMap]
	numUids: Int
}

type AddModulePayload {
	module(filter: ModuleFilter, first: Int, offset: Int): [Module]
	numUids: Int
}

type AddNurseryPayload {
	nursery(filter: NurseryFilter, first: Int, offset: Int): [Nursery]
	numUids: Int
}

type AddPhysicalSolenoidPayload {
	physicalSolenoid(filter: PhysicalSolenoidFilter, order: PhysicalSolenoidOrder, first: Int, offset: Int): [PhysicalSolenoid]
	numUids: Int
}

type AddPlantPayload {
	plant(filter: PlantFilter, order: PlantOrder, first: Int, offset: Int): [Plant]
	numUids: Int
}

type AddPortPayload {
	port(filter: PortFilter, order: PortOrder, first: Int, offset: Int): [Port]
	numUids: Int
}

type AddSeedPayload {
	seed(filter: SeedFilter, order: SeedOrder, first: Int, offset: Int): [Seed]
	numUids: Int
}

type AddShelfPayload {
	shelf(filter: ShelfFilter, order: ShelfOrder, first: Int, offset: Int): [Shelf]
	numUids: Int
}

type AddSignalPayload {
	signal(filter: SignalFilter, order: SignalOrder, first: Int, offset: Int): [Signal]
	numUids: Int
}

type AddSignalTablePayload {
	signalTable(filter: SignalTableFilter, first: Int, offset: Int): [SignalTable]
	numUids: Int
}

type AddSitePayload {
	site(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site]
	numUids: Int
}

type AddTimeSeriesPayload {
	timeSeries(filter: TimeSeriesFilter, order: TimeSeriesOrder, first: Int, offset: Int): [TimeSeries]
	numUids: Int
}

type AddWaterRoutePresetsPayload {
	waterRoutePresets(filter: WaterRoutePresetsFilter, first: Int, offset: Int): [WaterRoutePresets]
	numUids: Int
}

type AutomationClockAggregateResult {
	count: Int
}

type ChosenDriveOutputPresetAggregateResult {
	count: Int
}

type ClockNodePointAggregateResult {
	count: Int
	xidMin: Int
	xidMax: Int
	xidSum: Int
	xidAvg: Float
	timeOfDayMin: DateTime
	timeOfDayMax: DateTime
	oscPathMin: String
	oscPathMax: String
	outputStateMin: Int
	outputStateMax: Int
	outputStateSum: Int
	outputStateAvg: Float
}

type CropAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	required_module_typeMin: String
	required_module_typeMax: String
	days_harvestableMin: Int
	days_harvestableMax: Int
	days_harvestableSum: Int
	days_harvestableAvg: Float
	days_from_transfer_to_first_harvestMin: Int
	days_from_transfer_to_first_harvestMax: Int
	days_from_transfer_to_first_harvestSum: Int
	days_from_transfer_to_first_harvestAvg: Float
}

type CropIntentionAggregateResult {
	count: Int
	harvestPerWeekMin: Int
	harvestPerWeekMax: Int
	harvestPerWeekSum: Int
	harvestPerWeekAvg: Float
}

type CropIntentionsListAggregateResult {
	count: Int
}

type DeleteAutomationClockPayload {
	automationClock(filter: AutomationClockFilter, first: Int, offset: Int): [AutomationClock]
	msg: String
	numUids: Int
}

type DeleteChosenDriveOutputPresetPayload {
	chosenDriveOutputPreset(filter: ChosenDriveOutputPresetFilter, first: Int, offset: Int): [ChosenDriveOutputPreset]
	msg: String
	numUids: Int
}

type DeleteClockNodePointPayload {
	clockNodePoint(filter: ClockNodePointFilter, order: ClockNodePointOrder, first: Int, offset: Int): [ClockNodePoint]
	msg: String
	numUids: Int
}

type DeleteCropIntentionPayload {
	cropIntention(filter: CropIntentionFilter, order: CropIntentionOrder, first: Int, offset: Int): [CropIntention]
	msg: String
	numUids: Int
}

type DeleteCropIntentionsListPayload {
	cropIntentionsList(filter: CropIntentionsListFilter, first: Int, offset: Int): [CropIntentionsList]
	msg: String
	numUids: Int
}

type DeleteCropPayload {
	crop(filter: CropFilter, order: CropOrder, first: Int, offset: Int): [Crop]
	msg: String
	numUids: Int
}

type DeleteDrawerPayload {
	drawer(filter: DrawerFilter, order: DrawerOrder, first: Int, offset: Int): [Drawer]
	msg: String
	numUids: Int
}

type DeleteDriveOutputsPresetPayload {
	driveOutputsPreset(filter: DriveOutputsPresetFilter, order: DriveOutputsPresetOrder, first: Int, offset: Int): [DriveOutputsPreset]
	msg: String
	numUids: Int
}

type DeleteEndpointPayload {
	endpoint(filter: EndpointFilter, first: Int, offset: Int): [Endpoint]
	msg: String
	numUids: Int
}

type DeleteExampleObjectPayload {
	exampleObject(filter: ExampleObjectFilter, order: ExampleObjectOrder, first: Int, offset: Int): [ExampleObject]
	msg: String
	numUids: Int
}

type DeleteFlattenedSiteArrayPayload {
	flattenedSiteArray(filter: FlattenedSiteArrayFilter, first: Int, offset: Int): [FlattenedSiteArray]
	msg: String
	numUids: Int
}

type DeleteGerminationTrayPayload {
	germinationTray(filter: GerminationTrayFilter, first: Int, offset: Int): [GerminationTray]
	msg: String
	numUids: Int
}

type DeleteGrowPlatePayload {
	growPlate(filter: GrowPlateFilter, order: GrowPlateOrder, first: Int, offset: Int): [GrowPlate]
	msg: String
	numUids: Int
}

type DeleteIpAddrPayload {
	ipAddr(filter: IpAddrFilter, order: IpAddrOrder, first: Int, offset: Int): [IpAddr]
	msg: String
	numUids: Int
}

type DeleteJonsObjectPayload {
	jonsObject(filter: JonsObjectFilter, order: JonsObjectOrder, first: Int, offset: Int): [JonsObject]
	msg: String
	numUids: Int
}

type DeleteLocationPayload {
	location(filter: LocationFilter, order: LocationOrder, first: Int, offset: Int): [Location]
	msg: String
	numUids: Int
}

type DeleteModuleMapPayload {
	moduleMap(filter: ModuleMapFilter, first: Int, offset: Int): [ModuleMap]
	msg: String
	numUids: Int
}

type DeleteModulePayload {
	module(filter: ModuleFilter, first: Int, offset: Int): [Module]
	msg: String
	numUids: Int
}

type DeleteNurseryPayload {
	nursery(filter: NurseryFilter, first: Int, offset: Int): [Nursery]
	msg: String
	numUids: Int
}

type DeletePhysicalSolenoidPayload {
	physicalSolenoid(filter: PhysicalSolenoidFilter, order: PhysicalSolenoidOrder, first: Int, offset: Int): [PhysicalSolenoid]
	msg: String
	numUids: Int
}

type DeletePlantPayload {
	plant(filter: PlantFilter, order: PlantOrder, first: Int, offset: Int): [Plant]
	msg: String
	numUids: Int
}

type DeletePortPayload {
	port(filter: PortFilter, order: PortOrder, first: Int, offset: Int): [Port]
	msg: String
	numUids: Int
}

type DeleteSeedPayload {
	seed(filter: SeedFilter, order: SeedOrder, first: Int, offset: Int): [Seed]
	msg: String
	numUids: Int
}

type DeleteShelfPayload {
	shelf(filter: ShelfFilter, order: ShelfOrder, first: Int, offset: Int): [Shelf]
	msg: String
	numUids: Int
}

type DeleteSignalPayload {
	signal(filter: SignalFilter, order: SignalOrder, first: Int, offset: Int): [Signal]
	msg: String
	numUids: Int
}

type DeleteSignalTablePayload {
	signalTable(filter: SignalTableFilter, first: Int, offset: Int): [SignalTable]
	msg: String
	numUids: Int
}

type DeleteSitePayload {
	site(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site]
	msg: String
	numUids: Int
}

type DeleteTimeSeriesPayload {
	timeSeries(filter: TimeSeriesFilter, order: TimeSeriesOrder, first: Int, offset: Int): [TimeSeries]
	msg: String
	numUids: Int
}

type DeleteWaterRoutePresetsPayload {
	waterRoutePresets(filter: WaterRoutePresetsFilter, first: Int, offset: Int): [WaterRoutePresets]
	msg: String
	numUids: Int
}

type DrawerAggregateResult {
	count: Int
	stockMin: Int
	stockMax: Int
	stockSum: Int
	stockAvg: Float
}

type DriveOutputsPresetAggregateResult {
	count: Int
	boolArrayStringMin: String
	boolArrayStringMax: String
}

type EndpointAggregateResult {
	count: Int
}

type ExampleObjectAggregateResult {
	count: Int
	someDataMin: String
	someDataMax: String
	someTimeMin: DateTime
	someTimeMax: DateTime
}

type FlattenedSiteArrayAggregateResult {
	count: Int
}

type GerminationTrayAggregateResult {
	count: Int
}

type GrowPlateAggregateResult {
	count: Int
	rawNetCupReadingMin: Int
	rawNetCupReadingMax: Int
	rawNetCupReadingSum: Int
	rawNetCupReadingAvg: Float
}

type IpAddrAggregateResult {
	count: Int
	addrMin: String
	addrMax: String
}

type JonsObjectAggregateResult {
	count: Int
	someDataMin: String
	someDataMax: String
	someTimeMin: DateTime
	someTimeMax: DateTime
}

type LocationAggregateResult {
	count: Int
	xMin: Int
	xMax: Int
	xSum: Int
	xAvg: Float
	yMin: Int
	yMax: Int
	ySum: Int
	yAvg: Float
}

type ModuleAggregateResult {
	count: Int
}

type ModuleMapAggregateResult {
	count: Int
}

type NurseryAggregateResult {
	count: Int
}

type PhysicalSolenoidAggregateResult {
	count: Int
	outputDriveIndexMin: Int
	outputDriveIndexMax: Int
	outputDriveIndexSum: Int
	outputDriveIndexAvg: Float
}

type PlantAggregateResult {
	count: Int
	cropNameMin: String
	cropNameMax: String
	nutrientTypeMin: String
	nutrientTypeMax: String
	germinatedDateMin: DateTime
	germinatedDateMax: DateTime
	transferredDateMin: DateTime
	transferredDateMax: DateTime
	harvestedDateMin: DateTime
	harvestedDateMax: DateTime
}

type PortAggregateResult {
	count: Int
	portMin: Int
	portMax: Int
	portSum: Int
	portAvg: Float
}

type SeedAggregateResult {
	count: Int
	qrMin: String
	qrMax: String
}

type ShelfAggregateResult {
	count: Int
	verticalClearanceHeightToNextShelfMin: Int
	verticalClearanceHeightToNextShelfMax: Int
	verticalClearanceHeightToNextShelfSum: Int
	verticalClearanceHeightToNextShelfAvg: Float
}

type SignalAggregateResult {
	count: Int
	signalDateMin: DateTime
	signalDateMax: DateTime
	plantNameMin: String
	plantNameMax: String
	plantIdMin: String
	plantIdMax: String
	targetMessageMin: String
	targetMessageMax: String
	algoStringMin: String
	algoStringMax: String
	daysToGerminateMin: Int
	daysToGerminateMax: Int
	daysToGerminateSum: Int
	daysToGerminateAvg: Float
	growTimeMin: Int
	growTimeMax: Int
	growTimeSum: Int
	growTimeAvg: Float
	maxHarvTimeMin: Int
	maxHarvTimeMax: Int
	maxHarvTimeSum: Int
	maxHarvTimeAvg: Float
	moduleTypeMin: String
	moduleTypeMax: String
}

type SignalTableAggregateResult {
	count: Int
}

type SiteAggregateResult {
	count: Int
	uuidMin: Int
	uuidMax: Int
	uuidSum: Int
	uuidAvg: Float
}

type TimeSeriesAggregateResult {
	count: Int
	streamPathMin: String
	streamPathMax: String
}

type UpdateAutomationClockPayload {
	automationClock(filter: AutomationClockFilter, first: Int, offset: Int): [AutomationClock]
	numUids: Int
}

type UpdateChosenDriveOutputPresetPayload {
	chosenDriveOutputPreset(filter: ChosenDriveOutputPresetFilter, first: Int, offset: Int): [ChosenDriveOutputPreset]
	numUids: Int
}

type UpdateClockNodePointPayload {
	clockNodePoint(filter: ClockNodePointFilter, order: ClockNodePointOrder, first: Int, offset: Int): [ClockNodePoint]
	numUids: Int
}

type UpdateCropIntentionPayload {
	cropIntention(filter: CropIntentionFilter, order: CropIntentionOrder, first: Int, offset: Int): [CropIntention]
	numUids: Int
}

type UpdateCropIntentionsListPayload {
	cropIntentionsList(filter: CropIntentionsListFilter, first: Int, offset: Int): [CropIntentionsList]
	numUids: Int
}

type UpdateCropPayload {
	crop(filter: CropFilter, order: CropOrder, first: Int, offset: Int): [Crop]
	numUids: Int
}

type UpdateDrawerPayload {
	drawer(filter: DrawerFilter, order: DrawerOrder, first: Int, offset: Int): [Drawer]
	numUids: Int
}

type UpdateDriveOutputsPresetPayload {
	driveOutputsPreset(filter: DriveOutputsPresetFilter, order: DriveOutputsPresetOrder, first: Int, offset: Int): [DriveOutputsPreset]
	numUids: Int
}

type UpdateEndpointPayload {
	endpoint(filter: EndpointFilter, first: Int, offset: Int): [Endpoint]
	numUids: Int
}

type UpdateExampleObjectPayload {
	exampleObject(filter: ExampleObjectFilter, order: ExampleObjectOrder, first: Int, offset: Int): [ExampleObject]
	numUids: Int
}

type UpdateFlattenedSiteArrayPayload {
	flattenedSiteArray(filter: FlattenedSiteArrayFilter, first: Int, offset: Int): [FlattenedSiteArray]
	numUids: Int
}

type UpdateGerminationTrayPayload {
	germinationTray(filter: GerminationTrayFilter, first: Int, offset: Int): [GerminationTray]
	numUids: Int
}

type UpdateGrowPlatePayload {
	growPlate(filter: GrowPlateFilter, order: GrowPlateOrder, first: Int, offset: Int): [GrowPlate]
	numUids: Int
}

type UpdateIpAddrPayload {
	ipAddr(filter: IpAddrFilter, order: IpAddrOrder, first: Int, offset: Int): [IpAddr]
	numUids: Int
}

type UpdateJonsObjectPayload {
	jonsObject(filter: JonsObjectFilter, order: JonsObjectOrder, first: Int, offset: Int): [JonsObject]
	numUids: Int
}

type UpdateLocationPayload {
	location(filter: LocationFilter, order: LocationOrder, first: Int, offset: Int): [Location]
	numUids: Int
}

type UpdateModuleMapPayload {
	moduleMap(filter: ModuleMapFilter, first: Int, offset: Int): [ModuleMap]
	numUids: Int
}

type UpdateModulePayload {
	module(filter: ModuleFilter, first: Int, offset: Int): [Module]
	numUids: Int
}

type UpdateNurseryPayload {
	nursery(filter: NurseryFilter, first: Int, offset: Int): [Nursery]
	numUids: Int
}

type UpdatePhysicalSolenoidPayload {
	physicalSolenoid(filter: PhysicalSolenoidFilter, order: PhysicalSolenoidOrder, first: Int, offset: Int): [PhysicalSolenoid]
	numUids: Int
}

type UpdatePlantPayload {
	plant(filter: PlantFilter, order: PlantOrder, first: Int, offset: Int): [Plant]
	numUids: Int
}

type UpdatePortPayload {
	port(filter: PortFilter, order: PortOrder, first: Int, offset: Int): [Port]
	numUids: Int
}

type UpdateSeedPayload {
	seed(filter: SeedFilter, order: SeedOrder, first: Int, offset: Int): [Seed]
	numUids: Int
}

type UpdateShelfPayload {
	shelf(filter: ShelfFilter, order: ShelfOrder, first: Int, offset: Int): [Shelf]
	numUids: Int
}

type UpdateSignalPayload {
	signal(filter: SignalFilter, order: SignalOrder, first: Int, offset: Int): [Signal]
	numUids: Int
}

type UpdateSignalTablePayload {
	signalTable(filter: SignalTableFilter, first: Int, offset: Int): [SignalTable]
	numUids: Int
}

type UpdateSitePayload {
	site(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site]
	numUids: Int
}

type UpdateTimeSeriesPayload {
	timeSeries(filter: TimeSeriesFilter, order: TimeSeriesOrder, first: Int, offset: Int): [TimeSeries]
	numUids: Int
}

type UpdateWaterRoutePresetsPayload {
	waterRoutePresets(filter: WaterRoutePresetsFilter, first: Int, offset: Int): [WaterRoutePresets]
	numUids: Int
}

type WaterRoutePresetsAggregateResult {
	count: Int
}

#######################
# Generated Enums
#######################

enum AutomationClockHasFilter {
	clockNodes
}

enum ChosenDriveOutputPresetHasFilter {
	preset
}

enum ClockNodePointHasFilter {
	xid
	ownedByClock
	timeOfDay
	oscPath
	outputState
}

enum ClockNodePointOrderable {
	xid
	timeOfDay
	oscPath
	outputState
}

enum CropHasFilter {
	name
	required_module_type
	repeater
	days_harvestable
	days_from_transfer_to_first_harvest
}

enum CropIntentionHasFilter {
	crop
	harvestPerWeek
}

enum CropIntentionOrderable {
	harvestPerWeek
}

enum CropIntentionsListHasFilter {
	cropIntentions
}

enum CropOrderable {
	name
	required_module_type
	days_harvestable
	days_from_transfer_to_first_harvest
}

enum DrawerHasFilter {
	gridLocation
	cropAssignment
	stock
}

enum DrawerOrderable {
	stock
}

enum DriveOutputsPresetHasFilter {
	boolArrayString
	lxEndpoint
}

enum DriveOutputsPresetOrderable {
	boolArrayString
}

enum EndpointHasFilter {
	addr
	port
}

enum ExampleObjectHasFilter {
	someData
	someTime
}

enum ExampleObjectOrderable {
	someData
	someTime
}

enum FlattenedSiteArrayHasFilter {
	sites
}

enum GerminationTrayHasFilter {
	sites
}

enum GrowPlateHasFilter {
	rawNetCupReading
}

enum GrowPlateOrderable {
	rawNetCupReading
}

enum IpAddrHasFilter {
	addr
}

enum IpAddrOrderable {
	addr
}

enum JonsObjectHasFilter {
	someData
	someTime
}

enum JonsObjectOrderable {
	someData
	someTime
}

enum LocationHasFilter {
	x
	y
}

enum LocationOrderable {
	x
	y
}

enum ModuleHasFilter {
	instantiationTemplateUsed
	shelves
	nutrientMix
}

enum ModuleMapHasFilter {
	modules
}

enum NurseryHasFilter {
	GerminationTrays
}

enum PhysicalSolenoidHasFilter {
	outputDriveIndex
	outputDriveAddr
	driveState
	influxOutputCurrentTimeSeries
}

enum PhysicalSolenoidOrderable {
	outputDriveIndex
}

enum PlantHasFilter {
	cropName
	repeater
	nutrientType
	germinatedDate
	transferredDate
	harvestedDate
	location
}

enum PlantOrderable {
	cropName
	nutrientType
	germinatedDate
	transferredDate
	harvestedDate
}

enum PortHasFilter {
	port
}

enum PortOrderable {
	port
}

enum SeedHasFilter {
	qr
}

enum SeedOrderable {
	qr
}

enum ShelfHasFilter {
	sites
	verticalClearanceHeightToNextShelf
	parentModule
}

enum ShelfOrderable {
	verticalClearanceHeightToNextShelf
}

enum SignalHasFilter {
	signalDate
	signalType
	plantName
	plantId
	targetMessage
	algoString
	daysToGerminate
	growTime
	maxHarvTime
	moduleType
}

enum SignalOrderable {
	signalDate
	plantName
	plantId
	targetMessage
	algoString
	daysToGerminate
	growTime
	maxHarvTime
	moduleType
}

enum SignalTableHasFilter {
	signals
}

enum SiteHasFilter {
	uuid
	signal
	halPresence
	occupant
	parentArray
}

enum SiteOrderable {
	uuid
}

enum TimeSeriesHasFilter {
	addrInfluxInstance
	portInfluxInstance
	streamPath
}

enum TimeSeriesOrderable {
	streamPath
}

enum WaterRoutePresetsHasFilter {
	presets
}

#######################
# Generated Inputs
#######################

input AddAutomationClockInput {
	clockNodes: [ClockNodePointRef!]!
}

input AddChosenDriveOutputPresetInput {
	preset: DriveOutputsPresetRef!
}

input AddClockNodePointInput {
	xid: Int!
	ownedByClock: AutomationClockRef
	timeOfDay: DateTime!
	oscPath: String!
	outputState: Int!
}

input AddCropInput {
	name: String!
	required_module_type: String!
	repeater: Boolean!
	days_harvestable: Int!
	days_from_transfer_to_first_harvest: Int!
}

input AddCropIntentionInput {
	crop: CropRef!
	harvestPerWeek: Int!
}

input AddCropIntentionsListInput {
	cropIntentions: [CropIntentionRef!]!
}

input AddDrawerInput {
	gridLocation: LocationRef!
	cropAssignment: CropRef
	stock: Int
}

input AddDriveOutputsPresetInput {
	boolArrayString: String!
	lxEndpoint: EndpointRef!
}

input AddEndpointInput {
	addr: IpAddrRef!
	port: PortRef!
}

input AddExampleObjectInput {
	someData: String!
	someTime: DateTime!
}

input AddFlattenedSiteArrayInput {
	sites: [SiteRef!]!
}

input AddGerminationTrayInput {
	sites: [SiteRef!]!
}

input AddGrowPlateInput {
	rawNetCupReading: Int
}

input AddIpAddrInput {
	addr: String!
}

input AddJonsObjectInput {
	someData: String!
	someTime: DateTime!
}

input AddLocationInput {
	x: Int!
	y: Int!
}

input AddModuleInput {
	instantiationTemplateUsed: ModuleType!
	shelves: [ShelfRef]
	nutrientMix: NutrientMix
}

input AddModuleMapInput {
	modules: [ModuleRef]
}

input AddNurseryInput {
	GerminationTrays: [GerminationTrayRef!]!
}

input AddPhysicalSolenoidInput {
	outputDriveIndex: Int!
	outputDriveAddr: IpAddrRef!
	driveState: Boolean!
	influxOutputCurrentTimeSeries: TimeSeriesRef
}

input AddPlantInput {
	cropName: String!
	repeater: Boolean!
	nutrientType: String!
	germinatedDate: DateTime
	transferredDate: DateTime
	harvestedDate: DateTime
	location: SiteRef
}

input AddPortInput {
	port: Int!
}

input AddSeedInput {
	qr: String!
}

input AddShelfInput {
	sites: [SiteRef]
	verticalClearanceHeightToNextShelf: Int!
	parentModule: ModuleRef
}

input AddSignalInput {
	signalDate: DateTime!
	signalType: SignalType!
	plantName: String
	plantId: String
	targetMessage: String
	algoString: String
	daysToGerminate: Int
	growTime: Int
	maxHarvTime: Int
	moduleType: String
}

input AddSignalTableInput {
	signals: [SignalRef!]!
}

input AddSiteInput {
	uuid: Int!
	signal: SignalRef
	halPresence: Boolean
	occupant: PlantRef
	parentArray: FlattenedSiteArrayRef
}

input AddTimeSeriesInput {
	addrInfluxInstance: IpAddrRef!
	portInfluxInstance: PortRef!
	streamPath: String!
}

input AddWaterRoutePresetsInput {
	presets: [DriveOutputsPresetRef!]!
}

input AutomationClockFilter {
	id: [ID!]
	has: [AutomationClockHasFilter]
	and: [AutomationClockFilter]
	or: [AutomationClockFilter]
	not: AutomationClockFilter
}

input AutomationClockPatch {
	clockNodes: [ClockNodePointRef!]
}

input AutomationClockRef {
	id: ID
	clockNodes: [ClockNodePointRef!]
}

input ChosenDriveOutputPresetFilter {
	id: [ID!]
	has: [ChosenDriveOutputPresetHasFilter]
	and: [ChosenDriveOutputPresetFilter]
	or: [ChosenDriveOutputPresetFilter]
	not: ChosenDriveOutputPresetFilter
}

input ChosenDriveOutputPresetPatch {
	preset: DriveOutputsPresetRef
}

input ChosenDriveOutputPresetRef {
	id: ID
	preset: DriveOutputsPresetRef
}

input ClockNodePointFilter {
	id: [ID!]
	xid: IntFilter
	timeOfDay: DateTimeFilter
	has: [ClockNodePointHasFilter]
	and: [ClockNodePointFilter]
	or: [ClockNodePointFilter]
	not: ClockNodePointFilter
}

input ClockNodePointOrder {
	asc: ClockNodePointOrderable
	desc: ClockNodePointOrderable
	then: ClockNodePointOrder
}

input ClockNodePointPatch {
	ownedByClock: AutomationClockRef
	timeOfDay: DateTime
	oscPath: String
	outputState: Int
}

input ClockNodePointRef {
	id: ID
	xid: Int
	ownedByClock: AutomationClockRef
	timeOfDay: DateTime
	oscPath: String
	outputState: Int
}

input CropFilter {
	id: [ID!]
	has: [CropHasFilter]
	and: [CropFilter]
	or: [CropFilter]
	not: CropFilter
}

input CropIntentionFilter {
	has: [CropIntentionHasFilter]
	and: [CropIntentionFilter]
	or: [CropIntentionFilter]
	not: CropIntentionFilter
}

input CropIntentionOrder {
	asc: CropIntentionOrderable
	desc: CropIntentionOrderable
	then: CropIntentionOrder
}

input CropIntentionPatch {
	crop: CropRef
	harvestPerWeek: Int
}

input CropIntentionRef {
	crop: CropRef
	harvestPerWeek: Int
}

input CropIntentionsListFilter {
	has: [CropIntentionsListHasFilter]
	and: [CropIntentionsListFilter]
	or: [CropIntentionsListFilter]
	not: CropIntentionsListFilter
}

input CropIntentionsListPatch {
	cropIntentions: [CropIntentionRef!]
}

input CropIntentionsListRef {
	cropIntentions: [CropIntentionRef!]
}

input CropOrder {
	asc: CropOrderable
	desc: CropOrderable
	then: CropOrder
}

input CropPatch {
	name: String
	required_module_type: String
	repeater: Boolean
	days_harvestable: Int
	days_from_transfer_to_first_harvest: Int
}

input CropRef {
	id: ID
	name: String
	required_module_type: String
	repeater: Boolean
	days_harvestable: Int
	days_from_transfer_to_first_harvest: Int
}

input DrawerFilter {
	has: [DrawerHasFilter]
	and: [DrawerFilter]
	or: [DrawerFilter]
	not: DrawerFilter
}

input DrawerOrder {
	asc: DrawerOrderable
	desc: DrawerOrderable
	then: DrawerOrder
}

input DrawerPatch {
	gridLocation: LocationRef
	cropAssignment: CropRef
	stock: Int
}

input DrawerRef {
	gridLocation: LocationRef
	cropAssignment: CropRef
	stock: Int
}

input DriveOutputsPresetFilter {
	id: [ID!]
	has: [DriveOutputsPresetHasFilter]
	and: [DriveOutputsPresetFilter]
	or: [DriveOutputsPresetFilter]
	not: DriveOutputsPresetFilter
}

input DriveOutputsPresetOrder {
	asc: DriveOutputsPresetOrderable
	desc: DriveOutputsPresetOrderable
	then: DriveOutputsPresetOrder
}

input DriveOutputsPresetPatch {
	boolArrayString: String
	lxEndpoint: EndpointRef
}

input DriveOutputsPresetRef {
	id: ID
	boolArrayString: String
	lxEndpoint: EndpointRef
}

input EndpointFilter {
	id: [ID!]
	has: [EndpointHasFilter]
	and: [EndpointFilter]
	or: [EndpointFilter]
	not: EndpointFilter
}

input EndpointPatch {
	addr: IpAddrRef
	port: PortRef
}

input EndpointRef {
	id: ID
	addr: IpAddrRef
	port: PortRef
}

input ExampleObjectFilter {
	id: [ID!]
	has: [ExampleObjectHasFilter]
	and: [ExampleObjectFilter]
	or: [ExampleObjectFilter]
	not: ExampleObjectFilter
}

input ExampleObjectOrder {
	asc: ExampleObjectOrderable
	desc: ExampleObjectOrderable
	then: ExampleObjectOrder
}

input ExampleObjectPatch {
	someData: String
	someTime: DateTime
}

input ExampleObjectRef {
	id: ID
	someData: String
	someTime: DateTime
}

input FlattenedSiteArrayFilter {
	id: [ID!]
	has: [FlattenedSiteArrayHasFilter]
	and: [FlattenedSiteArrayFilter]
	or: [FlattenedSiteArrayFilter]
	not: FlattenedSiteArrayFilter
}

input FlattenedSiteArrayPatch {
	sites: [SiteRef!]
}

input FlattenedSiteArrayRef {
	id: ID
	sites: [SiteRef!]
}

input GerminationTrayFilter {
	id: [ID!]
	has: [GerminationTrayHasFilter]
	and: [GerminationTrayFilter]
	or: [GerminationTrayFilter]
	not: GerminationTrayFilter
}

input GerminationTrayPatch {
	sites: [SiteRef!]
}

input GerminationTrayRef {
	id: ID
	sites: [SiteRef!]
}

input GrowPlateFilter {
	has: [GrowPlateHasFilter]
	and: [GrowPlateFilter]
	or: [GrowPlateFilter]
	not: GrowPlateFilter
}

input GrowPlateOrder {
	asc: GrowPlateOrderable
	desc: GrowPlateOrderable
	then: GrowPlateOrder
}

input GrowPlatePatch {
	rawNetCupReading: Int
}

input GrowPlateRef {
	rawNetCupReading: Int
}

input IpAddrFilter {
	has: [IpAddrHasFilter]
	and: [IpAddrFilter]
	or: [IpAddrFilter]
	not: IpAddrFilter
}

input IpAddrOrder {
	asc: IpAddrOrderable
	desc: IpAddrOrderable
	then: IpAddrOrder
}

input IpAddrPatch {
	addr: String
}

input IpAddrRef {
	addr: String
}

input JonsObjectFilter {
	id: [ID!]
	someTime: DateTimeFilter
	has: [JonsObjectHasFilter]
	and: [JonsObjectFilter]
	or: [JonsObjectFilter]
	not: JonsObjectFilter
}

input JonsObjectOrder {
	asc: JonsObjectOrderable
	desc: JonsObjectOrderable
	then: JonsObjectOrder
}

input JonsObjectPatch {
	someData: String
	someTime: DateTime
}

input JonsObjectRef {
	id: ID
	someData: String
	someTime: DateTime
}

input LocationFilter {
	has: [LocationHasFilter]
	and: [LocationFilter]
	or: [LocationFilter]
	not: LocationFilter
}

input LocationOrder {
	asc: LocationOrderable
	desc: LocationOrderable
	then: LocationOrder
}

input LocationPatch {
	x: Int
	y: Int
}

input LocationRef {
	x: Int
	y: Int
}

input ModuleFilter {
	id: [ID!]
	has: [ModuleHasFilter]
	and: [ModuleFilter]
	or: [ModuleFilter]
	not: ModuleFilter
}

input ModuleMapFilter {
	id: [ID!]
	has: [ModuleMapHasFilter]
	and: [ModuleMapFilter]
	or: [ModuleMapFilter]
	not: ModuleMapFilter
}

input ModuleMapPatch {
	modules: [ModuleRef]
}

input ModuleMapRef {
	id: ID
	modules: [ModuleRef]
}

input ModulePatch {
	instantiationTemplateUsed: ModuleType
	shelves: [ShelfRef]
	nutrientMix: NutrientMix
}

input ModuleRef {
	id: ID
	instantiationTemplateUsed: ModuleType
	shelves: [ShelfRef]
	nutrientMix: NutrientMix
}

input NurseryFilter {
	id: [ID!]
	has: [NurseryHasFilter]
	and: [NurseryFilter]
	or: [NurseryFilter]
	not: NurseryFilter
}

input NurseryPatch {
	GerminationTrays: [GerminationTrayRef!]
}

input NurseryRef {
	id: ID
	GerminationTrays: [GerminationTrayRef!]
}

input PhysicalSolenoidFilter {
	id: [ID!]
	has: [PhysicalSolenoidHasFilter]
	and: [PhysicalSolenoidFilter]
	or: [PhysicalSolenoidFilter]
	not: PhysicalSolenoidFilter
}

input PhysicalSolenoidOrder {
	asc: PhysicalSolenoidOrderable
	desc: PhysicalSolenoidOrderable
	then: PhysicalSolenoidOrder
}

input PhysicalSolenoidPatch {
	outputDriveIndex: Int
	outputDriveAddr: IpAddrRef
	driveState: Boolean
	influxOutputCurrentTimeSeries: TimeSeriesRef
}

input PhysicalSolenoidRef {
	id: ID
	outputDriveIndex: Int
	outputDriveAddr: IpAddrRef
	driveState: Boolean
	influxOutputCurrentTimeSeries: TimeSeriesRef
}

input PlantFilter {
	id: [ID!]
	cropName: StringTermFilter
	repeater: Boolean
	nutrientType: StringTermFilter
	has: [PlantHasFilter]
	and: [PlantFilter]
	or: [PlantFilter]
	not: PlantFilter
}

input PlantOrder {
	asc: PlantOrderable
	desc: PlantOrderable
	then: PlantOrder
}

input PlantPatch {
	cropName: String
	repeater: Boolean
	nutrientType: String
	germinatedDate: DateTime
	transferredDate: DateTime
	harvestedDate: DateTime
	location: SiteRef
}

input PlantRef {
	id: ID
	cropName: String
	repeater: Boolean
	nutrientType: String
	germinatedDate: DateTime
	transferredDate: DateTime
	harvestedDate: DateTime
	location: SiteRef
}

input PortFilter {
	has: [PortHasFilter]
	and: [PortFilter]
	or: [PortFilter]
	not: PortFilter
}

input PortOrder {
	asc: PortOrderable
	desc: PortOrderable
	then: PortOrder
}

input PortPatch {
	port: Int
}

input PortRef {
	port: Int
}

input SeedFilter {
	has: [SeedHasFilter]
	and: [SeedFilter]
	or: [SeedFilter]
	not: SeedFilter
}

input SeedOrder {
	asc: SeedOrderable
	desc: SeedOrderable
	then: SeedOrder
}

input SeedPatch {
	qr: String
}

input SeedRef {
	qr: String
}

input ShelfFilter {
	id: [ID!]
	has: [ShelfHasFilter]
	and: [ShelfFilter]
	or: [ShelfFilter]
	not: ShelfFilter
}

input ShelfOrder {
	asc: ShelfOrderable
	desc: ShelfOrderable
	then: ShelfOrder
}

input ShelfPatch {
	sites: [SiteRef]
	verticalClearanceHeightToNextShelf: Int
	parentModule: ModuleRef
}

input ShelfRef {
	id: ID
	sites: [SiteRef]
	verticalClearanceHeightToNextShelf: Int
	parentModule: ModuleRef
}

input SignalFilter {
	id: [ID!]
	signalDate: DateTimeFilter
	has: [SignalHasFilter]
	and: [SignalFilter]
	or: [SignalFilter]
	not: SignalFilter
}

input SignalOrder {
	asc: SignalOrderable
	desc: SignalOrderable
	then: SignalOrder
}

input SignalPatch {
	signalDate: DateTime
	signalType: SignalType
	plantName: String
	plantId: String
	targetMessage: String
	algoString: String
	daysToGerminate: Int
	growTime: Int
	maxHarvTime: Int
	moduleType: String
}

input SignalRef {
	id: ID
	signalDate: DateTime
	signalType: SignalType
	plantName: String
	plantId: String
	targetMessage: String
	algoString: String
	daysToGerminate: Int
	growTime: Int
	maxHarvTime: Int
	moduleType: String
}

input SignalTableFilter {
	id: [ID!]
	has: [SignalTableHasFilter]
	and: [SignalTableFilter]
	or: [SignalTableFilter]
	not: SignalTableFilter
}

input SignalTablePatch {
	signals: [SignalRef!]
}

input SignalTableRef {
	id: ID
	signals: [SignalRef!]
}

input SiteFilter {
	id: [ID!]
	uuid: IntFilter
	has: [SiteHasFilter]
	and: [SiteFilter]
	or: [SiteFilter]
	not: SiteFilter
}

input SiteOrder {
	asc: SiteOrderable
	desc: SiteOrderable
	then: SiteOrder
}

input SitePatch {
	signal: SignalRef
	halPresence: Boolean
	occupant: PlantRef
	parentArray: FlattenedSiteArrayRef
}

input SiteRef {
	id: ID
	uuid: Int
	signal: SignalRef
	halPresence: Boolean
	occupant: PlantRef
	parentArray: FlattenedSiteArrayRef
}

input TimeSeriesFilter {
	id: [ID!]
	has: [TimeSeriesHasFilter]
	and: [TimeSeriesFilter]
	or: [TimeSeriesFilter]
	not: TimeSeriesFilter
}

input TimeSeriesOrder {
	asc: TimeSeriesOrderable
	desc: TimeSeriesOrderable
	then: TimeSeriesOrder
}

input TimeSeriesPatch {
	addrInfluxInstance: IpAddrRef
	portInfluxInstance: PortRef
	streamPath: String
}

input TimeSeriesRef {
	id: ID
	addrInfluxInstance: IpAddrRef
	portInfluxInstance: PortRef
	streamPath: String
}

input UpdateAutomationClockInput {
	filter: AutomationClockFilter!
	set: AutomationClockPatch
	remove: AutomationClockPatch
}

input UpdateChosenDriveOutputPresetInput {
	filter: ChosenDriveOutputPresetFilter!
	set: ChosenDriveOutputPresetPatch
	remove: ChosenDriveOutputPresetPatch
}

input UpdateClockNodePointInput {
	filter: ClockNodePointFilter!
	set: ClockNodePointPatch
	remove: ClockNodePointPatch
}

input UpdateCropInput {
	filter: CropFilter!
	set: CropPatch
	remove: CropPatch
}

input UpdateCropIntentionInput {
	filter: CropIntentionFilter!
	set: CropIntentionPatch
	remove: CropIntentionPatch
}

input UpdateCropIntentionsListInput {
	filter: CropIntentionsListFilter!
	set: CropIntentionsListPatch
	remove: CropIntentionsListPatch
}

input UpdateDrawerInput {
	filter: DrawerFilter!
	set: DrawerPatch
	remove: DrawerPatch
}

input UpdateDriveOutputsPresetInput {
	filter: DriveOutputsPresetFilter!
	set: DriveOutputsPresetPatch
	remove: DriveOutputsPresetPatch
}

input UpdateEndpointInput {
	filter: EndpointFilter!
	set: EndpointPatch
	remove: EndpointPatch
}

input UpdateExampleObjectInput {
	filter: ExampleObjectFilter!
	set: ExampleObjectPatch
	remove: ExampleObjectPatch
}

input UpdateFlattenedSiteArrayInput {
	filter: FlattenedSiteArrayFilter!
	set: FlattenedSiteArrayPatch
	remove: FlattenedSiteArrayPatch
}

input UpdateGerminationTrayInput {
	filter: GerminationTrayFilter!
	set: GerminationTrayPatch
	remove: GerminationTrayPatch
}

input UpdateGrowPlateInput {
	filter: GrowPlateFilter!
	set: GrowPlatePatch
	remove: GrowPlatePatch
}

input UpdateIpAddrInput {
	filter: IpAddrFilter!
	set: IpAddrPatch
	remove: IpAddrPatch
}

input UpdateJonsObjectInput {
	filter: JonsObjectFilter!
	set: JonsObjectPatch
	remove: JonsObjectPatch
}

input UpdateLocationInput {
	filter: LocationFilter!
	set: LocationPatch
	remove: LocationPatch
}

input UpdateModuleInput {
	filter: ModuleFilter!
	set: ModulePatch
	remove: ModulePatch
}

input UpdateModuleMapInput {
	filter: ModuleMapFilter!
	set: ModuleMapPatch
	remove: ModuleMapPatch
}

input UpdateNurseryInput {
	filter: NurseryFilter!
	set: NurseryPatch
	remove: NurseryPatch
}

input UpdatePhysicalSolenoidInput {
	filter: PhysicalSolenoidFilter!
	set: PhysicalSolenoidPatch
	remove: PhysicalSolenoidPatch
}

input UpdatePlantInput {
	filter: PlantFilter!
	set: PlantPatch
	remove: PlantPatch
}

input UpdatePortInput {
	filter: PortFilter!
	set: PortPatch
	remove: PortPatch
}

input UpdateSeedInput {
	filter: SeedFilter!
	set: SeedPatch
	remove: SeedPatch
}

input UpdateShelfInput {
	filter: ShelfFilter!
	set: ShelfPatch
	remove: ShelfPatch
}

input UpdateSignalInput {
	filter: SignalFilter!
	set: SignalPatch
	remove: SignalPatch
}

input UpdateSignalTableInput {
	filter: SignalTableFilter!
	set: SignalTablePatch
	remove: SignalTablePatch
}

input UpdateSiteInput {
	filter: SiteFilter!
	set: SitePatch
	remove: SitePatch
}

input UpdateTimeSeriesInput {
	filter: TimeSeriesFilter!
	set: TimeSeriesPatch
	remove: TimeSeriesPatch
}

input UpdateWaterRoutePresetsInput {
	filter: WaterRoutePresetsFilter!
	set: WaterRoutePresetsPatch
	remove: WaterRoutePresetsPatch
}

input WaterRoutePresetsFilter {
	id: [ID!]
	has: [WaterRoutePresetsHasFilter]
	and: [WaterRoutePresetsFilter]
	or: [WaterRoutePresetsFilter]
	not: WaterRoutePresetsFilter
}

input WaterRoutePresetsPatch {
	presets: [DriveOutputsPresetRef!]
}

input WaterRoutePresetsRef {
	id: ID
	presets: [DriveOutputsPresetRef!]
}

#######################
# Generated Query
#######################

type Query {
	queryCropIntentionsList(filter: CropIntentionsListFilter, first: Int, offset: Int): [CropIntentionsList]
	aggregateCropIntentionsList(filter: CropIntentionsListFilter): CropIntentionsListAggregateResult
	queryCropIntention(filter: CropIntentionFilter, order: CropIntentionOrder, first: Int, offset: Int): [CropIntention]
	aggregateCropIntention(filter: CropIntentionFilter): CropIntentionAggregateResult
	queryGrowPlate(filter: GrowPlateFilter, order: GrowPlateOrder, first: Int, offset: Int): [GrowPlate]
	aggregateGrowPlate(filter: GrowPlateFilter): GrowPlateAggregateResult
	getSignalTable(id: ID!): SignalTable
	querySignalTable(filter: SignalTableFilter, first: Int, offset: Int): [SignalTable]
	aggregateSignalTable(filter: SignalTableFilter): SignalTableAggregateResult
	getSignal(id: ID!): Signal
	querySignal(filter: SignalFilter, order: SignalOrder, first: Int, offset: Int): [Signal]
	aggregateSignal(filter: SignalFilter): SignalAggregateResult
	getModuleMap(id: ID!): ModuleMap
	queryModuleMap(filter: ModuleMapFilter, first: Int, offset: Int): [ModuleMap]
	aggregateModuleMap(filter: ModuleMapFilter): ModuleMapAggregateResult
	getModule(id: ID!): Module
	queryModule(filter: ModuleFilter, first: Int, offset: Int): [Module]
	aggregateModule(filter: ModuleFilter): ModuleAggregateResult
	getShelf(id: ID!): Shelf
	queryShelf(filter: ShelfFilter, order: ShelfOrder, first: Int, offset: Int): [Shelf]
	aggregateShelf(filter: ShelfFilter): ShelfAggregateResult
	getFlattenedSiteArray(id: ID!): FlattenedSiteArray
	queryFlattenedSiteArray(filter: FlattenedSiteArrayFilter, first: Int, offset: Int): [FlattenedSiteArray]
	aggregateFlattenedSiteArray(filter: FlattenedSiteArrayFilter): FlattenedSiteArrayAggregateResult
	getSite(id: ID, uuid: Int): Site
	querySite(filter: SiteFilter, order: SiteOrder, first: Int, offset: Int): [Site]
	aggregateSite(filter: SiteFilter): SiteAggregateResult
	getPlant(id: ID!): Plant
	queryPlant(filter: PlantFilter, order: PlantOrder, first: Int, offset: Int): [Plant]
	aggregatePlant(filter: PlantFilter): PlantAggregateResult
	getCrop(id: ID!): Crop
	queryCrop(filter: CropFilter, order: CropOrder, first: Int, offset: Int): [Crop]
	aggregateCrop(filter: CropFilter): CropAggregateResult
	querySeed(filter: SeedFilter, order: SeedOrder, first: Int, offset: Int): [Seed]
	aggregateSeed(filter: SeedFilter): SeedAggregateResult
	queryDrawer(filter: DrawerFilter, order: DrawerOrder, first: Int, offset: Int): [Drawer]
	aggregateDrawer(filter: DrawerFilter): DrawerAggregateResult
	queryLocation(filter: LocationFilter, order: LocationOrder, first: Int, offset: Int): [Location]
	aggregateLocation(filter: LocationFilter): LocationAggregateResult
	getNursery(id: ID!): Nursery
	queryNursery(filter: NurseryFilter, first: Int, offset: Int): [Nursery]
	aggregateNursery(filter: NurseryFilter): NurseryAggregateResult
	getGerminationTray(id: ID!): GerminationTray
	queryGerminationTray(filter: GerminationTrayFilter, first: Int, offset: Int): [GerminationTray]
	aggregateGerminationTray(filter: GerminationTrayFilter): GerminationTrayAggregateResult
	getWaterRoutePresets(id: ID!): WaterRoutePresets
	queryWaterRoutePresets(filter: WaterRoutePresetsFilter, first: Int, offset: Int): [WaterRoutePresets]
	aggregateWaterRoutePresets(filter: WaterRoutePresetsFilter): WaterRoutePresetsAggregateResult
	getChosenDriveOutputPreset(id: ID!): ChosenDriveOutputPreset
	queryChosenDriveOutputPreset(filter: ChosenDriveOutputPresetFilter, first: Int, offset: Int): [ChosenDriveOutputPreset]
	aggregateChosenDriveOutputPreset(filter: ChosenDriveOutputPresetFilter): ChosenDriveOutputPresetAggregateResult
	getDriveOutputsPreset(id: ID!): DriveOutputsPreset
	queryDriveOutputsPreset(filter: DriveOutputsPresetFilter, order: DriveOutputsPresetOrder, first: Int, offset: Int): [DriveOutputsPreset]
	aggregateDriveOutputsPreset(filter: DriveOutputsPresetFilter): DriveOutputsPresetAggregateResult
	getPhysicalSolenoid(id: ID!): PhysicalSolenoid
	queryPhysicalSolenoid(filter: PhysicalSolenoidFilter, order: PhysicalSolenoidOrder, first: Int, offset: Int): [PhysicalSolenoid]
	aggregatePhysicalSolenoid(filter: PhysicalSolenoidFilter): PhysicalSolenoidAggregateResult
	queryIpAddr(filter: IpAddrFilter, order: IpAddrOrder, first: Int, offset: Int): [IpAddr]
	aggregateIpAddr(filter: IpAddrFilter): IpAddrAggregateResult
	queryPort(filter: PortFilter, order: PortOrder, first: Int, offset: Int): [Port]
	aggregatePort(filter: PortFilter): PortAggregateResult
	getEndpoint(id: ID!): Endpoint
	queryEndpoint(filter: EndpointFilter, first: Int, offset: Int): [Endpoint]
	aggregateEndpoint(filter: EndpointFilter): EndpointAggregateResult
	getTimeSeries(id: ID!): TimeSeries
	queryTimeSeries(filter: TimeSeriesFilter, order: TimeSeriesOrder, first: Int, offset: Int): [TimeSeries]
	aggregateTimeSeries(filter: TimeSeriesFilter): TimeSeriesAggregateResult
	getAutomationClock(id: ID!): AutomationClock
	queryAutomationClock(filter: AutomationClockFilter, first: Int, offset: Int): [AutomationClock]
	aggregateAutomationClock(filter: AutomationClockFilter): AutomationClockAggregateResult
	getClockNodePoint(id: ID, xid: Int): ClockNodePoint
	queryClockNodePoint(filter: ClockNodePointFilter, order: ClockNodePointOrder, first: Int, offset: Int): [ClockNodePoint]
	aggregateClockNodePoint(filter: ClockNodePointFilter): ClockNodePointAggregateResult
	getExampleObject(id: ID!): ExampleObject
	queryExampleObject(filter: ExampleObjectFilter, order: ExampleObjectOrder, first: Int, offset: Int): [ExampleObject]
	aggregateExampleObject(filter: ExampleObjectFilter): ExampleObjectAggregateResult
	getJonsObject(id: ID!): JonsObject
	queryJonsObject(filter: JonsObjectFilter, order: JonsObjectOrder, first: Int, offset: Int): [JonsObject]
	aggregateJonsObject(filter: JonsObjectFilter): JonsObjectAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	addCropIntentionsList(input: [AddCropIntentionsListInput!]!): AddCropIntentionsListPayload
	updateCropIntentionsList(input: UpdateCropIntentionsListInput!): UpdateCropIntentionsListPayload
	deleteCropIntentionsList(filter: CropIntentionsListFilter!): DeleteCropIntentionsListPayload
	addCropIntention(input: [AddCropIntentionInput!]!): AddCropIntentionPayload
	updateCropIntention(input: UpdateCropIntentionInput!): UpdateCropIntentionPayload
	deleteCropIntention(filter: CropIntentionFilter!): DeleteCropIntentionPayload
	addGrowPlate(input: [AddGrowPlateInput!]!): AddGrowPlatePayload
	updateGrowPlate(input: UpdateGrowPlateInput!): UpdateGrowPlatePayload
	deleteGrowPlate(filter: GrowPlateFilter!): DeleteGrowPlatePayload
	addSignalTable(input: [AddSignalTableInput!]!): AddSignalTablePayload
	updateSignalTable(input: UpdateSignalTableInput!): UpdateSignalTablePayload
	deleteSignalTable(filter: SignalTableFilter!): DeleteSignalTablePayload
	addSignal(input: [AddSignalInput!]!): AddSignalPayload
	updateSignal(input: UpdateSignalInput!): UpdateSignalPayload
	deleteSignal(filter: SignalFilter!): DeleteSignalPayload
	addModuleMap(input: [AddModuleMapInput!]!): AddModuleMapPayload
	updateModuleMap(input: UpdateModuleMapInput!): UpdateModuleMapPayload
	deleteModuleMap(filter: ModuleMapFilter!): DeleteModuleMapPayload
	addModule(input: [AddModuleInput!]!): AddModulePayload
	updateModule(input: UpdateModuleInput!): UpdateModulePayload
	deleteModule(filter: ModuleFilter!): DeleteModulePayload
	addShelf(input: [AddShelfInput!]!): AddShelfPayload
	updateShelf(input: UpdateShelfInput!): UpdateShelfPayload
	deleteShelf(filter: ShelfFilter!): DeleteShelfPayload
	addFlattenedSiteArray(input: [AddFlattenedSiteArrayInput!]!): AddFlattenedSiteArrayPayload
	updateFlattenedSiteArray(input: UpdateFlattenedSiteArrayInput!): UpdateFlattenedSiteArrayPayload
	deleteFlattenedSiteArray(filter: FlattenedSiteArrayFilter!): DeleteFlattenedSiteArrayPayload
	addSite(input: [AddSiteInput!]!, upsert: Boolean): AddSitePayload
	updateSite(input: UpdateSiteInput!): UpdateSitePayload
	deleteSite(filter: SiteFilter!): DeleteSitePayload
	addPlant(input: [AddPlantInput!]!): AddPlantPayload
	updatePlant(input: UpdatePlantInput!): UpdatePlantPayload
	deletePlant(filter: PlantFilter!): DeletePlantPayload
	addCrop(input: [AddCropInput!]!): AddCropPayload
	updateCrop(input: UpdateCropInput!): UpdateCropPayload
	deleteCrop(filter: CropFilter!): DeleteCropPayload
	addSeed(input: [AddSeedInput!]!): AddSeedPayload
	updateSeed(input: UpdateSeedInput!): UpdateSeedPayload
	deleteSeed(filter: SeedFilter!): DeleteSeedPayload
	addDrawer(input: [AddDrawerInput!]!): AddDrawerPayload
	updateDrawer(input: UpdateDrawerInput!): UpdateDrawerPayload
	deleteDrawer(filter: DrawerFilter!): DeleteDrawerPayload
	addLocation(input: [AddLocationInput!]!): AddLocationPayload
	updateLocation(input: UpdateLocationInput!): UpdateLocationPayload
	deleteLocation(filter: LocationFilter!): DeleteLocationPayload
	addNursery(input: [AddNurseryInput!]!): AddNurseryPayload
	updateNursery(input: UpdateNurseryInput!): UpdateNurseryPayload
	deleteNursery(filter: NurseryFilter!): DeleteNurseryPayload
	addGerminationTray(input: [AddGerminationTrayInput!]!): AddGerminationTrayPayload
	updateGerminationTray(input: UpdateGerminationTrayInput!): UpdateGerminationTrayPayload
	deleteGerminationTray(filter: GerminationTrayFilter!): DeleteGerminationTrayPayload
	addWaterRoutePresets(input: [AddWaterRoutePresetsInput!]!): AddWaterRoutePresetsPayload
	updateWaterRoutePresets(input: UpdateWaterRoutePresetsInput!): UpdateWaterRoutePresetsPayload
	deleteWaterRoutePresets(filter: WaterRoutePresetsFilter!): DeleteWaterRoutePresetsPayload
	addChosenDriveOutputPreset(input: [AddChosenDriveOutputPresetInput!]!): AddChosenDriveOutputPresetPayload
	updateChosenDriveOutputPreset(input: UpdateChosenDriveOutputPresetInput!): UpdateChosenDriveOutputPresetPayload
	deleteChosenDriveOutputPreset(filter: ChosenDriveOutputPresetFilter!): DeleteChosenDriveOutputPresetPayload
	addDriveOutputsPreset(input: [AddDriveOutputsPresetInput!]!): AddDriveOutputsPresetPayload
	updateDriveOutputsPreset(input: UpdateDriveOutputsPresetInput!): UpdateDriveOutputsPresetPayload
	deleteDriveOutputsPreset(filter: DriveOutputsPresetFilter!): DeleteDriveOutputsPresetPayload
	addPhysicalSolenoid(input: [AddPhysicalSolenoidInput!]!): AddPhysicalSolenoidPayload
	updatePhysicalSolenoid(input: UpdatePhysicalSolenoidInput!): UpdatePhysicalSolenoidPayload
	deletePhysicalSolenoid(filter: PhysicalSolenoidFilter!): DeletePhysicalSolenoidPayload
	addIpAddr(input: [AddIpAddrInput!]!): AddIpAddrPayload
	updateIpAddr(input: UpdateIpAddrInput!): UpdateIpAddrPayload
	deleteIpAddr(filter: IpAddrFilter!): DeleteIpAddrPayload
	addPort(input: [AddPortInput!]!): AddPortPayload
	updatePort(input: UpdatePortInput!): UpdatePortPayload
	deletePort(filter: PortFilter!): DeletePortPayload
	addEndpoint(input: [AddEndpointInput!]!): AddEndpointPayload
	updateEndpoint(input: UpdateEndpointInput!): UpdateEndpointPayload
	deleteEndpoint(filter: EndpointFilter!): DeleteEndpointPayload
	addTimeSeries(input: [AddTimeSeriesInput!]!): AddTimeSeriesPayload
	updateTimeSeries(input: UpdateTimeSeriesInput!): UpdateTimeSeriesPayload
	deleteTimeSeries(filter: TimeSeriesFilter!): DeleteTimeSeriesPayload
	addAutomationClock(input: [AddAutomationClockInput!]!): AddAutomationClockPayload
	updateAutomationClock(input: UpdateAutomationClockInput!): UpdateAutomationClockPayload
	deleteAutomationClock(filter: AutomationClockFilter!): DeleteAutomationClockPayload
	addClockNodePoint(input: [AddClockNodePointInput!]!, upsert: Boolean): AddClockNodePointPayload
	updateClockNodePoint(input: UpdateClockNodePointInput!): UpdateClockNodePointPayload
	deleteClockNodePoint(filter: ClockNodePointFilter!): DeleteClockNodePointPayload
	addExampleObject(input: [AddExampleObjectInput!]!): AddExampleObjectPayload
	updateExampleObject(input: UpdateExampleObjectInput!): UpdateExampleObjectPayload
	deleteExampleObject(filter: ExampleObjectFilter!): DeleteExampleObjectPayload
	addJonsObject(input: [AddJonsObjectInput!]!): AddJonsObjectPayload
	updateJonsObject(input: UpdateJonsObjectInput!): UpdateJonsObjectPayload
	deleteJonsObject(filter: JonsObjectFilter!): DeleteJonsObjectPayload
}

#######################
# Generated Subscriptions
#######################

type Subscription {
	getChosenDriveOutputPreset(id: ID!): ChosenDriveOutputPreset
	queryChosenDriveOutputPreset(filter: ChosenDriveOutputPresetFilter, first: Int, offset: Int): [ChosenDriveOutputPreset]
	aggregateChosenDriveOutputPreset(filter: ChosenDriveOutputPresetFilter): ChosenDriveOutputPresetAggregateResult
}
